// Package basyxAas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.3 DO NOT EDIT.
package basyxAas

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for DataSpecificationIEC61360ContentDataType.
const (
	BOOLEAN            DataSpecificationIEC61360ContentDataType = "BOOLEAN"
	DATE               DataSpecificationIEC61360ContentDataType = "DATE"
	RATIONAL           DataSpecificationIEC61360ContentDataType = "RATIONAL"
	RATIONALMEASURE    DataSpecificationIEC61360ContentDataType = "RATIONAL_MEASURE"
	REALCOUNT          DataSpecificationIEC61360ContentDataType = "REAL_COUNT"
	REALCURRENCY       DataSpecificationIEC61360ContentDataType = "REAL_CURRENCY"
	REALMEASURE        DataSpecificationIEC61360ContentDataType = "REAL_MEASURE"
	STRING             DataSpecificationIEC61360ContentDataType = "STRING"
	STRINGTRANSLATABLE DataSpecificationIEC61360ContentDataType = "STRING_TRANSLATABLE"
	TIME               DataSpecificationIEC61360ContentDataType = "TIME"
	TIMESTAMP          DataSpecificationIEC61360ContentDataType = "TIMESTAMP"
	URL                DataSpecificationIEC61360ContentDataType = "URL"
)

// Defines values for DataSpecificationIEC61360ContentValueType.
const (
	DataSpecificationIEC61360ContentValueTypeAnyUri             DataSpecificationIEC61360ContentValueType = "anyUri"
	DataSpecificationIEC61360ContentValueTypeBase64Binary       DataSpecificationIEC61360ContentValueType = "base64Binary"
	DataSpecificationIEC61360ContentValueTypeBoolean            DataSpecificationIEC61360ContentValueType = "boolean"
	DataSpecificationIEC61360ContentValueTypeByte               DataSpecificationIEC61360ContentValueType = "byte"
	DataSpecificationIEC61360ContentValueTypeDate               DataSpecificationIEC61360ContentValueType = "date"
	DataSpecificationIEC61360ContentValueTypeDateTime           DataSpecificationIEC61360ContentValueType = "dateTime"
	DataSpecificationIEC61360ContentValueTypeDateTimeStamp      DataSpecificationIEC61360ContentValueType = "dateTimeStamp"
	DataSpecificationIEC61360ContentValueTypeDayTimeDuration    DataSpecificationIEC61360ContentValueType = "dayTimeDuration"
	DataSpecificationIEC61360ContentValueTypeDecimal            DataSpecificationIEC61360ContentValueType = "decimal"
	DataSpecificationIEC61360ContentValueTypeDouble             DataSpecificationIEC61360ContentValueType = "double"
	DataSpecificationIEC61360ContentValueTypeDuration           DataSpecificationIEC61360ContentValueType = "duration"
	DataSpecificationIEC61360ContentValueTypeENTITY             DataSpecificationIEC61360ContentValueType = "ENTITY"
	DataSpecificationIEC61360ContentValueTypeFloat              DataSpecificationIEC61360ContentValueType = "float"
	DataSpecificationIEC61360ContentValueTypeGDay               DataSpecificationIEC61360ContentValueType = "gDay"
	DataSpecificationIEC61360ContentValueTypeGMonth             DataSpecificationIEC61360ContentValueType = "gMonth"
	DataSpecificationIEC61360ContentValueTypeGMonthDay          DataSpecificationIEC61360ContentValueType = "gMonthDay"
	DataSpecificationIEC61360ContentValueTypeGYear              DataSpecificationIEC61360ContentValueType = "gYear"
	DataSpecificationIEC61360ContentValueTypeGYearMonth         DataSpecificationIEC61360ContentValueType = "gYearMonth"
	DataSpecificationIEC61360ContentValueTypeHexBinary          DataSpecificationIEC61360ContentValueType = "hexBinary"
	DataSpecificationIEC61360ContentValueTypeID                 DataSpecificationIEC61360ContentValueType = "ID"
	DataSpecificationIEC61360ContentValueTypeIDREF              DataSpecificationIEC61360ContentValueType = "IDREF"
	DataSpecificationIEC61360ContentValueTypeInt                DataSpecificationIEC61360ContentValueType = "int"
	DataSpecificationIEC61360ContentValueTypeInteger            DataSpecificationIEC61360ContentValueType = "integer"
	DataSpecificationIEC61360ContentValueTypeLanguage           DataSpecificationIEC61360ContentValueType = "language"
	DataSpecificationIEC61360ContentValueTypeLong               DataSpecificationIEC61360ContentValueType = "long"
	DataSpecificationIEC61360ContentValueTypeNCName             DataSpecificationIEC61360ContentValueType = "NCName"
	DataSpecificationIEC61360ContentValueTypeNMTOKEN            DataSpecificationIEC61360ContentValueType = "NMTOKEN"
	DataSpecificationIEC61360ContentValueTypeNOTATION           DataSpecificationIEC61360ContentValueType = "NOTATION"
	DataSpecificationIEC61360ContentValueTypeName               DataSpecificationIEC61360ContentValueType = "Name"
	DataSpecificationIEC61360ContentValueTypeNegativeInteger    DataSpecificationIEC61360ContentValueType = "negativeInteger"
	DataSpecificationIEC61360ContentValueTypeNonNegativeInteger DataSpecificationIEC61360ContentValueType = "nonNegativeInteger"
	DataSpecificationIEC61360ContentValueTypeNonPositiveInteger DataSpecificationIEC61360ContentValueType = "nonPositiveInteger"
	DataSpecificationIEC61360ContentValueTypeNormalizedString   DataSpecificationIEC61360ContentValueType = "normalizedString"
	DataSpecificationIEC61360ContentValueTypePositiveInteger    DataSpecificationIEC61360ContentValueType = "positiveInteger"
	DataSpecificationIEC61360ContentValueTypeQName              DataSpecificationIEC61360ContentValueType = "QName"
	DataSpecificationIEC61360ContentValueTypeShort              DataSpecificationIEC61360ContentValueType = "short"
	DataSpecificationIEC61360ContentValueTypeString             DataSpecificationIEC61360ContentValueType = "string"
	DataSpecificationIEC61360ContentValueTypeTime               DataSpecificationIEC61360ContentValueType = "time"
	DataSpecificationIEC61360ContentValueTypeToken              DataSpecificationIEC61360ContentValueType = "token"
	DataSpecificationIEC61360ContentValueTypeUnsignedByte       DataSpecificationIEC61360ContentValueType = "unsignedByte"
	DataSpecificationIEC61360ContentValueTypeUnsignedInt        DataSpecificationIEC61360ContentValueType = "unsignedInt"
	DataSpecificationIEC61360ContentValueTypeUnsignedLong       DataSpecificationIEC61360ContentValueType = "unsignedLong"
	DataSpecificationIEC61360ContentValueTypeUnsignedShort      DataSpecificationIEC61360ContentValueType = "unsignedShort"
	DataSpecificationIEC61360ContentValueTypeYearMonthDuration  DataSpecificationIEC61360ContentValueType = "yearMonthDuration"
)

// Defines values for EntityType.
const (
	CoManagedEntity   EntityType = "CoManagedEntity"
	SelfManagedEntity EntityType = "SelfManagedEntity"
)

// Defines values for InvocationResponseExecutionState.
const (
	Canceled  InvocationResponseExecutionState = "Canceled"
	Completed InvocationResponseExecutionState = "Completed"
	Failed    InvocationResponseExecutionState = "Failed"
	Initiated InvocationResponseExecutionState = "Initiated"
	Running   InvocationResponseExecutionState = "Running"
	Timeout   InvocationResponseExecutionState = "Timeout"
)

// Defines values for KeyElements.
const (
	KeyElementsAccessPermissionRule         KeyElements = "AccessPermissionRule"
	KeyElementsAnnotatedRelationshipElement KeyElements = "AnnotatedRelationshipElement"
	KeyElementsAsset                        KeyElements = "Asset"
	KeyElementsAssetAdministrationShell     KeyElements = "AssetAdministrationShell"
	KeyElementsBasicEvent                   KeyElements = "BasicEvent"
	KeyElementsBlob                         KeyElements = "Blob"
	KeyElementsCapability                   KeyElements = "Capability"
	KeyElementsConceptDescription           KeyElements = "ConceptDescription"
	KeyElementsConceptDictionary            KeyElements = "ConceptDictionary"
	KeyElementsDataElement                  KeyElements = "DataElement"
	KeyElementsEntity                       KeyElements = "Entity"
	KeyElementsEvent                        KeyElements = "Event"
	KeyElementsFile                         KeyElements = "File"
	KeyElementsFragmentReference            KeyElements = "FragmentReference"
	KeyElementsGlobalReference              KeyElements = "GlobalReference"
	KeyElementsMultiLanguageProperty        KeyElements = "MultiLanguageProperty"
	KeyElementsOperation                    KeyElements = "Operation"
	KeyElementsProperty                     KeyElements = "Property"
	KeyElementsRange                        KeyElements = "Range"
	KeyElementsReferenceElement             KeyElements = "ReferenceElement"
	KeyElementsRelationshipElement          KeyElements = "RelationshipElement"
	KeyElementsSubmodel                     KeyElements = "Submodel"
	KeyElementsSubmodelElement              KeyElements = "SubmodelElement"
	KeyElementsSubmodelElementCollection    KeyElements = "SubmodelElementCollection"
	KeyElementsView                         KeyElements = "View"
)

// Defines values for KeyType.
const (
	Custom     KeyType = "Custom"
	FragmentId KeyType = "FragmentId"
	IRDI       KeyType = "IRDI"
	IRI        KeyType = "IRI"
	IdShort    KeyType = "IdShort"
)

// Defines values for LevelType.
const (
	Max LevelType = "Max"
	Min LevelType = "Min"
	Nom LevelType = "Nom"
	Typ LevelType = "Typ"
)

// Defines values for MessageMessageType.
const (
	Debug       MessageMessageType = "Debug"
	Error       MessageMessageType = "Error"
	Exception   MessageMessageType = "Exception"
	Fatal       MessageMessageType = "Fatal"
	Information MessageMessageType = "Information"
	Unspecified MessageMessageType = "Unspecified"
	Warning     MessageMessageType = "Warning"
)

// Defines values for ModelTypes.
const (
	ModelTypesAccessPermissionRule         ModelTypes = "AccessPermissionRule"
	ModelTypesAnnotatedRelationshipElement ModelTypes = "AnnotatedRelationshipElement"
	ModelTypesAsset                        ModelTypes = "Asset"
	ModelTypesAssetAdministrationShell     ModelTypes = "AssetAdministrationShell"
	ModelTypesBasicEvent                   ModelTypes = "BasicEvent"
	ModelTypesBlob                         ModelTypes = "Blob"
	ModelTypesCapability                   ModelTypes = "Capability"
	ModelTypesConceptDescription           ModelTypes = "ConceptDescription"
	ModelTypesConceptDictionary            ModelTypes = "ConceptDictionary"
	ModelTypesConstraint                   ModelTypes = "Constraint"
	ModelTypesDataElement                  ModelTypes = "DataElement"
	ModelTypesEntity                       ModelTypes = "Entity"
	ModelTypesEvent                        ModelTypes = "Event"
	ModelTypesFile                         ModelTypes = "File"
	ModelTypesFormula                      ModelTypes = "Formula"
	ModelTypesFragmentReference            ModelTypes = "FragmentReference"
	ModelTypesGlobalReference              ModelTypes = "GlobalReference"
	ModelTypesMultiLanguageProperty        ModelTypes = "MultiLanguageProperty"
	ModelTypesOperation                    ModelTypes = "Operation"
	ModelTypesProperty                     ModelTypes = "Property"
	ModelTypesQualifier                    ModelTypes = "Qualifier"
	ModelTypesRange                        ModelTypes = "Range"
	ModelTypesReferenceElement             ModelTypes = "ReferenceElement"
	ModelTypesRelationshipElement          ModelTypes = "RelationshipElement"
	ModelTypesSubmodel                     ModelTypes = "Submodel"
	ModelTypesSubmodelElement              ModelTypes = "SubmodelElement"
	ModelTypesSubmodelElementCollection    ModelTypes = "SubmodelElementCollection"
	ModelTypesView                         ModelTypes = "View"
)

// Defines values for ModelingKind.
const (
	Instance ModelingKind = "Instance"
	Template ModelingKind = "Template"
)

// Defines values for PermissionKindOfPermission.
const (
	Allow         PermissionKindOfPermission = "Allow"
	Deny          PermissionKindOfPermission = "Deny"
	NotApplicable PermissionKindOfPermission = "NotApplicable"
	Undefined     PermissionKindOfPermission = "Undefined"
)

// Defines values for PropertyValueType.
const (
	PropertyValueTypeAnyUri             PropertyValueType = "anyUri"
	PropertyValueTypeBase64Binary       PropertyValueType = "base64Binary"
	PropertyValueTypeBoolean            PropertyValueType = "boolean"
	PropertyValueTypeByte               PropertyValueType = "byte"
	PropertyValueTypeDate               PropertyValueType = "date"
	PropertyValueTypeDateTime           PropertyValueType = "dateTime"
	PropertyValueTypeDateTimeStamp      PropertyValueType = "dateTimeStamp"
	PropertyValueTypeDayTimeDuration    PropertyValueType = "dayTimeDuration"
	PropertyValueTypeDecimal            PropertyValueType = "decimal"
	PropertyValueTypeDouble             PropertyValueType = "double"
	PropertyValueTypeDuration           PropertyValueType = "duration"
	PropertyValueTypeENTITY             PropertyValueType = "ENTITY"
	PropertyValueTypeFloat              PropertyValueType = "float"
	PropertyValueTypeGDay               PropertyValueType = "gDay"
	PropertyValueTypeGMonth             PropertyValueType = "gMonth"
	PropertyValueTypeGMonthDay          PropertyValueType = "gMonthDay"
	PropertyValueTypeGYear              PropertyValueType = "gYear"
	PropertyValueTypeGYearMonth         PropertyValueType = "gYearMonth"
	PropertyValueTypeHexBinary          PropertyValueType = "hexBinary"
	PropertyValueTypeID                 PropertyValueType = "ID"
	PropertyValueTypeIDREF              PropertyValueType = "IDREF"
	PropertyValueTypeInt                PropertyValueType = "int"
	PropertyValueTypeInteger            PropertyValueType = "integer"
	PropertyValueTypeLanguage           PropertyValueType = "language"
	PropertyValueTypeLong               PropertyValueType = "long"
	PropertyValueTypeNCName             PropertyValueType = "NCName"
	PropertyValueTypeNMTOKEN            PropertyValueType = "NMTOKEN"
	PropertyValueTypeNOTATION           PropertyValueType = "NOTATION"
	PropertyValueTypeName               PropertyValueType = "Name"
	PropertyValueTypeNegativeInteger    PropertyValueType = "negativeInteger"
	PropertyValueTypeNonNegativeInteger PropertyValueType = "nonNegativeInteger"
	PropertyValueTypeNonPositiveInteger PropertyValueType = "nonPositiveInteger"
	PropertyValueTypeNormalizedString   PropertyValueType = "normalizedString"
	PropertyValueTypePositiveInteger    PropertyValueType = "positiveInteger"
	PropertyValueTypeQName              PropertyValueType = "QName"
	PropertyValueTypeShort              PropertyValueType = "short"
	PropertyValueTypeString             PropertyValueType = "string"
	PropertyValueTypeTime               PropertyValueType = "time"
	PropertyValueTypeToken              PropertyValueType = "token"
	PropertyValueTypeUnsignedByte       PropertyValueType = "unsignedByte"
	PropertyValueTypeUnsignedInt        PropertyValueType = "unsignedInt"
	PropertyValueTypeUnsignedLong       PropertyValueType = "unsignedLong"
	PropertyValueTypeUnsignedShort      PropertyValueType = "unsignedShort"
	PropertyValueTypeYearMonthDuration  PropertyValueType = "yearMonthDuration"
)

// Defines values for RangeValueType.
const (
	RangeValueTypeAnyUri             RangeValueType = "anyUri"
	RangeValueTypeBase64Binary       RangeValueType = "base64Binary"
	RangeValueTypeBoolean            RangeValueType = "boolean"
	RangeValueTypeByte               RangeValueType = "byte"
	RangeValueTypeDate               RangeValueType = "date"
	RangeValueTypeDateTime           RangeValueType = "dateTime"
	RangeValueTypeDateTimeStamp      RangeValueType = "dateTimeStamp"
	RangeValueTypeDayTimeDuration    RangeValueType = "dayTimeDuration"
	RangeValueTypeDecimal            RangeValueType = "decimal"
	RangeValueTypeDouble             RangeValueType = "double"
	RangeValueTypeDuration           RangeValueType = "duration"
	RangeValueTypeENTITY             RangeValueType = "ENTITY"
	RangeValueTypeFloat              RangeValueType = "float"
	RangeValueTypeGDay               RangeValueType = "gDay"
	RangeValueTypeGMonth             RangeValueType = "gMonth"
	RangeValueTypeGMonthDay          RangeValueType = "gMonthDay"
	RangeValueTypeGYear              RangeValueType = "gYear"
	RangeValueTypeGYearMonth         RangeValueType = "gYearMonth"
	RangeValueTypeHexBinary          RangeValueType = "hexBinary"
	RangeValueTypeID                 RangeValueType = "ID"
	RangeValueTypeIDREF              RangeValueType = "IDREF"
	RangeValueTypeInt                RangeValueType = "int"
	RangeValueTypeInteger            RangeValueType = "integer"
	RangeValueTypeLanguage           RangeValueType = "language"
	RangeValueTypeLong               RangeValueType = "long"
	RangeValueTypeNCName             RangeValueType = "NCName"
	RangeValueTypeNMTOKEN            RangeValueType = "NMTOKEN"
	RangeValueTypeNOTATION           RangeValueType = "NOTATION"
	RangeValueTypeName               RangeValueType = "Name"
	RangeValueTypeNegativeInteger    RangeValueType = "negativeInteger"
	RangeValueTypeNonNegativeInteger RangeValueType = "nonNegativeInteger"
	RangeValueTypeNonPositiveInteger RangeValueType = "nonPositiveInteger"
	RangeValueTypeNormalizedString   RangeValueType = "normalizedString"
	RangeValueTypePositiveInteger    RangeValueType = "positiveInteger"
	RangeValueTypeQName              RangeValueType = "QName"
	RangeValueTypeShort              RangeValueType = "short"
	RangeValueTypeString             RangeValueType = "string"
	RangeValueTypeTime               RangeValueType = "time"
	RangeValueTypeToken              RangeValueType = "token"
	RangeValueTypeUnsignedByte       RangeValueType = "unsignedByte"
	RangeValueTypeUnsignedInt        RangeValueType = "unsignedInt"
	RangeValueTypeUnsignedLong       RangeValueType = "unsignedLong"
	RangeValueTypeUnsignedShort      RangeValueType = "unsignedShort"
	RangeValueTypeYearMonthDuration  RangeValueType = "yearMonthDuration"
)

// Defines values for ValueObjectValueType.
const (
	ValueObjectValueTypeAnyUri             ValueObjectValueType = "anyUri"
	ValueObjectValueTypeBase64Binary       ValueObjectValueType = "base64Binary"
	ValueObjectValueTypeBoolean            ValueObjectValueType = "boolean"
	ValueObjectValueTypeByte               ValueObjectValueType = "byte"
	ValueObjectValueTypeDate               ValueObjectValueType = "date"
	ValueObjectValueTypeDateTime           ValueObjectValueType = "dateTime"
	ValueObjectValueTypeDateTimeStamp      ValueObjectValueType = "dateTimeStamp"
	ValueObjectValueTypeDayTimeDuration    ValueObjectValueType = "dayTimeDuration"
	ValueObjectValueTypeDecimal            ValueObjectValueType = "decimal"
	ValueObjectValueTypeDouble             ValueObjectValueType = "double"
	ValueObjectValueTypeDuration           ValueObjectValueType = "duration"
	ValueObjectValueTypeENTITY             ValueObjectValueType = "ENTITY"
	ValueObjectValueTypeFloat              ValueObjectValueType = "float"
	ValueObjectValueTypeGDay               ValueObjectValueType = "gDay"
	ValueObjectValueTypeGMonth             ValueObjectValueType = "gMonth"
	ValueObjectValueTypeGMonthDay          ValueObjectValueType = "gMonthDay"
	ValueObjectValueTypeGYear              ValueObjectValueType = "gYear"
	ValueObjectValueTypeGYearMonth         ValueObjectValueType = "gYearMonth"
	ValueObjectValueTypeHexBinary          ValueObjectValueType = "hexBinary"
	ValueObjectValueTypeID                 ValueObjectValueType = "ID"
	ValueObjectValueTypeIDREF              ValueObjectValueType = "IDREF"
	ValueObjectValueTypeInt                ValueObjectValueType = "int"
	ValueObjectValueTypeInteger            ValueObjectValueType = "integer"
	ValueObjectValueTypeLanguage           ValueObjectValueType = "language"
	ValueObjectValueTypeLong               ValueObjectValueType = "long"
	ValueObjectValueTypeNCName             ValueObjectValueType = "NCName"
	ValueObjectValueTypeNMTOKEN            ValueObjectValueType = "NMTOKEN"
	ValueObjectValueTypeNOTATION           ValueObjectValueType = "NOTATION"
	ValueObjectValueTypeName               ValueObjectValueType = "Name"
	ValueObjectValueTypeNegativeInteger    ValueObjectValueType = "negativeInteger"
	ValueObjectValueTypeNonNegativeInteger ValueObjectValueType = "nonNegativeInteger"
	ValueObjectValueTypeNonPositiveInteger ValueObjectValueType = "nonPositiveInteger"
	ValueObjectValueTypeNormalizedString   ValueObjectValueType = "normalizedString"
	ValueObjectValueTypePositiveInteger    ValueObjectValueType = "positiveInteger"
	ValueObjectValueTypeQName              ValueObjectValueType = "QName"
	ValueObjectValueTypeShort              ValueObjectValueType = "short"
	ValueObjectValueTypeString             ValueObjectValueType = "string"
	ValueObjectValueTypeTime               ValueObjectValueType = "time"
	ValueObjectValueTypeToken              ValueObjectValueType = "token"
	ValueObjectValueTypeUnsignedByte       ValueObjectValueType = "unsignedByte"
	ValueObjectValueTypeUnsignedInt        ValueObjectValueType = "unsignedInt"
	ValueObjectValueTypeUnsignedLong       ValueObjectValueType = "unsignedLong"
	ValueObjectValueTypeUnsignedShort      ValueObjectValueType = "unsignedShort"
	ValueObjectValueTypeYearMonthDuration  ValueObjectValueType = "yearMonthDuration"
)

// AccessControl defines model for AccessControl.
type AccessControl struct {
	AccessPermissionRule            *[]AccessPermissionRule `json:"accessPermissionRule,omitempty"`
	DefaultEnvironmentAttributes    *Reference              `json:"defaultEnvironmentAttributes,omitempty"`
	DefaultPermissions              *Reference              `json:"defaultPermissions,omitempty"`
	DefaultSubjectAttributes        *Reference              `json:"defaultSubjectAttributes,omitempty"`
	SelectableEnvironmentAttributes *Reference              `json:"selectableEnvironmentAttributes,omitempty"`
	SelectablePermissions           *Reference              `json:"selectablePermissions,omitempty"`
	SelectableSubjectAttributes     *Reference              `json:"selectableSubjectAttributes,omitempty"`
}

// AccessControlPolicyPoints defines model for AccessControlPolicyPoints.
type AccessControlPolicyPoints struct {
	PolicyAdministrationPoint PolicyAdministrationPoint `json:"policyAdministrationPoint"`
	PolicyDecisionPoint       PolicyDecisionPoint       `json:"policyDecisionPoint"`
	PolicyEnforcementPoint    PolicyEnforcementPoint    `json:"policyEnforcementPoint"`
	PolicyInformationPoints   *PolicyInformationPoints  `json:"policyInformationPoints,omitempty"`
}

// AccessPermissionRule defines model for AccessPermissionRule.
type AccessPermissionRule struct {
	Category                *string                 `json:"category,omitempty"`
	Description             *[]LangString           `json:"description,omitempty"`
	IdShort                 string                  `json:"idShort"`
	ModelType               ModelType               `json:"modelType"`
	Parent                  *Reference              `json:"parent,omitempty"`
	PermissionsPerObject    *[]PermissionsPerObject `json:"permissionsPerObject,omitempty"`
	Qualifiers              *[]Constraint           `json:"qualifiers,omitempty"`
	TargetSubjectAttributes []SubjectAttributes     `json:"targetSubjectAttributes"`
}

// AdministrativeInformation defines model for AdministrativeInformation.
type AdministrativeInformation struct {
	Revision *string `json:"revision,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AssetAdministrationShell defines model for AssetAdministrationShell.
type AssetAdministrationShell struct {
	Administration             *AdministrativeInformation   `json:"administration,omitempty"`
	Asset                      Reference                    `json:"asset"`
	Category                   *string                      `json:"category,omitempty"`
	ConceptDictionaries        *[]ConceptDictionary         `json:"conceptDictionaries,omitempty"`
	DerivedFrom                *Reference                   `json:"derivedFrom,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	Identification             Identifier                   `json:"identification"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Security                   *Security                    `json:"security,omitempty"`
	Submodels                  *[]Reference                 `json:"submodels,omitempty"`
	Views                      *[]View                      `json:"views,omitempty"`
}

// BasicEvent defines model for BasicEvent.
type BasicEvent struct {
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	ModelType                  ModelType                    `json:"modelType"`
	Observed                   Reference                    `json:"observed"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
}

// Blob defines model for Blob.
type Blob struct {
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	MimeType                   string                       `json:"mimeType"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
	Value                      string                       `json:"value"`
}

// BlobCertificate defines model for BlobCertificate.
type BlobCertificate struct {
	BlobCertificate    *Blob        `json:"blobCertificate,omitempty"`
	ContainedExtension *[]Reference `json:"containedExtension,omitempty"`
	LastCertificate    *bool        `json:"lastCertificate,omitempty"`
}

// Capability defines model for Capability.
type Capability = SubmodelElement

// Certificate defines model for Certificate.
type Certificate = map[string]interface{}

// ConceptDictionary defines model for ConceptDictionary.
type ConceptDictionary struct {
	Category                   *string                      `json:"category,omitempty"`
	ConceptDescriptions        *[]Reference                 `json:"conceptDescriptions,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
}

// Constraint defines model for Constraint.
type Constraint struct {
	ModelType ModelType `json:"modelType"`
}

// DataSpecificationContent defines model for DataSpecificationContent.
type DataSpecificationContent struct {
	union json.RawMessage
}

// DataSpecificationIEC61360Content defines model for DataSpecificationIEC61360Content.
type DataSpecificationIEC61360Content struct {
	DataType           *DataSpecificationIEC61360ContentDataType  `json:"dataType,omitempty"`
	Definition         *[]LangString                              `json:"definition,omitempty"`
	LevelType          *[]LevelType                               `json:"levelType,omitempty"`
	PreferredName      []LangString                               `json:"preferredName"`
	ShortName          *[]LangString                              `json:"shortName,omitempty"`
	SourceOfDefinition *string                                    `json:"sourceOfDefinition,omitempty"`
	Symbol             *string                                    `json:"symbol,omitempty"`
	Unit               *string                                    `json:"unit,omitempty"`
	UnitId             *Reference                                 `json:"unitId,omitempty"`
	Value              *string                                    `json:"value,omitempty"`
	ValueFormat        *string                                    `json:"valueFormat,omitempty"`
	ValueId            *Reference                                 `json:"valueId,omitempty"`
	ValueList          *ValueList                                 `json:"valueList,omitempty"`
	ValueType          *DataSpecificationIEC61360ContentValueType `json:"valueType,omitempty"`
}

// DataSpecificationIEC61360ContentDataType defines model for DataSpecificationIEC61360Content.DataType.
type DataSpecificationIEC61360ContentDataType string

// DataSpecificationIEC61360ContentValueType defines model for DataSpecificationIEC61360Content.ValueType.
type DataSpecificationIEC61360ContentValueType string

// DataSpecificationPhysicalUnitContent defines model for DataSpecificationPhysicalUnitContent.
type DataSpecificationPhysicalUnitContent struct {
	ConversionFactor        *string      `json:"conversionFactor,omitempty"`
	Definition              []LangString `json:"definition"`
	DinNotation             *string      `json:"dinNotation,omitempty"`
	EceCode                 *string      `json:"eceCode,omitempty"`
	EceName                 *string      `json:"eceName,omitempty"`
	NistName                *string      `json:"nistName,omitempty"`
	RegistrationAuthorityId *string      `json:"registrationAuthorityId,omitempty"`
	SiName                  *string      `json:"siName,omitempty"`
	SiNotation              *string      `json:"siNotation,omitempty"`
	SourceOfDefinition      *string      `json:"sourceOfDefinition,omitempty"`
	Supplier                *string      `json:"supplier,omitempty"`
	UnitName                string       `json:"unitName"`
	UnitSymbol              string       `json:"unitSymbol"`
}

// EmbeddedDataSpecification defines model for EmbeddedDataSpecification.
type EmbeddedDataSpecification struct {
	DataSpecification        Reference                `json:"dataSpecification"`
	DataSpecificationContent DataSpecificationContent `json:"dataSpecificationContent"`
}

// Entity defines model for Entity.
type Entity struct {
	Asset                      *Reference                   `json:"asset,omitempty"`
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	EntityType                 EntityType                   `json:"entityType"`
	IdShort                    string                       `json:"idShort"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
	Statements                 *[]SubmodelElement           `json:"statements,omitempty"`
}

// EntityType defines model for EntityType.
type EntityType string

// Event defines model for Event.
type Event = SubmodelElement

// File defines model for File.
type File struct {
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	MimeType                   string                       `json:"mimeType"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
	Value                      string                       `json:"value"`
}

// HasDataSpecification defines model for HasDataSpecification.
type HasDataSpecification struct {
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
}

// HasSemantics defines model for HasSemantics.
type HasSemantics struct {
	SemanticId *Reference `json:"semanticId,omitempty"`
}

// Identifiable defines model for Identifiable.
type Identifiable struct {
	Administration *AdministrativeInformation `json:"administration,omitempty"`
	Category       *string                    `json:"category,omitempty"`
	Description    *[]LangString              `json:"description,omitempty"`
	IdShort        string                     `json:"idShort"`
	Identification Identifier                 `json:"identification"`
	ModelType      ModelType                  `json:"modelType"`
	Parent         *Reference                 `json:"parent,omitempty"`
}

// Identifier defines model for Identifier.
type Identifier struct {
	Id     string  `json:"id"`
	IdType KeyType `json:"idType"`
}

// InvocationRequest defines model for InvocationRequest.
type InvocationRequest struct {
	InoutputArguments *[]OperationVariable `json:"inoutputArguments,omitempty"`
	InputArguments    *[]OperationVariable `json:"inputArguments,omitempty"`
	RequestId         *string              `json:"requestId,omitempty"`
	Timeout           *int                 `json:"timeout,omitempty"`
}

// InvocationResponse defines model for InvocationResponse.
type InvocationResponse struct {
	ExecutionState    *InvocationResponseExecutionState `json:"executionState,omitempty"`
	InoutputArguments *[]OperationVariable              `json:"inoutputArguments,omitempty"`
	OperationResult   *Result                           `json:"operationResult,omitempty"`
	OutputArguments   *[]OperationVariable              `json:"outputArguments,omitempty"`
	RequestId         *string                           `json:"requestId,omitempty"`
}

// InvocationResponseExecutionState defines model for InvocationResponse.ExecutionState.
type InvocationResponseExecutionState string

// Key defines model for Key.
type Key struct {
	IdType KeyType     `json:"idType"`
	Local  bool        `json:"local"`
	Type   KeyElements `json:"type"`
	Value  string      `json:"value"`
}

// KeyElements defines model for KeyElements.
type KeyElements string

// KeyType defines model for KeyType.
type KeyType string

// LangString defines model for LangString.
type LangString struct {
	Language string `json:"language"`
	Text     string `json:"text"`
}

// LevelType defines model for LevelType.
type LevelType string

// Message defines model for Message.
type Message struct {
	Code        *string             `json:"code,omitempty"`
	MessageType *MessageMessageType `json:"messageType,omitempty"`
	Text        *string             `json:"text,omitempty"`
}

// MessageMessageType defines model for Message.MessageType.
type MessageMessageType string

// ModelType defines model for ModelType.
type ModelType struct {
	Name ModelTypes `json:"name"`
}

// ModelTypes defines model for ModelTypes.
type ModelTypes string

// ModelingKind defines model for ModelingKind.
type ModelingKind string

// MultiLanguageProperty defines model for MultiLanguageProperty.
type MultiLanguageProperty struct {
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
	Value                      *[]LangString                `json:"value,omitempty"`
	ValueId                    *Reference                   `json:"valueId,omitempty"`
}

// ObjectAttributes defines model for ObjectAttributes.
type ObjectAttributes struct {
	ObjectAttribute *[]Property `json:"objectAttribute,omitempty"`
}

// Operation defines model for Operation.
type Operation struct {
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	InoutputVariable           *[]OperationVariable         `json:"inoutputVariable,omitempty"`
	InputVariable              *[]OperationVariable         `json:"inputVariable,omitempty"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	ModelType                  ModelType                    `json:"modelType"`
	OutputVariable             *[]OperationVariable         `json:"outputVariable,omitempty"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
}

// OperationVariable defines model for OperationVariable.
type OperationVariable struct {
	Value OperationVariable_Value `json:"value"`
}

// OperationVariable_Value defines model for OperationVariable.Value.
type OperationVariable_Value struct {
	union json.RawMessage
}

// Permission defines model for Permission.
type Permission struct {
	KindOfPermission PermissionKindOfPermission `json:"kindOfPermission"`
	Permission       Reference                  `json:"permission"`
}

// PermissionKindOfPermission defines model for Permission.KindOfPermission.
type PermissionKindOfPermission string

// PermissionsPerObject defines model for PermissionsPerObject.
type PermissionsPerObject struct {
	Object                 *Reference        `json:"object,omitempty"`
	Permission             *[]Permission     `json:"permission,omitempty"`
	TargetObjectAttributes *ObjectAttributes `json:"targetObjectAttributes,omitempty"`
}

// PolicyAdministrationPoint defines model for PolicyAdministrationPoint.
type PolicyAdministrationPoint struct {
	ExternalAccessControl bool           `json:"externalAccessControl"`
	LocalAccessControl    *AccessControl `json:"localAccessControl,omitempty"`
}

// PolicyDecisionPoint defines model for PolicyDecisionPoint.
type PolicyDecisionPoint struct {
	ExternalPolicyDecisionPoints bool `json:"externalPolicyDecisionPoints"`
}

// PolicyEnforcementPoint defines model for PolicyEnforcementPoint.
type PolicyEnforcementPoint struct {
	ExternalPolicyEnforcementPoint bool `json:"externalPolicyEnforcementPoint"`
}

// PolicyInformationPoints defines model for PolicyInformationPoints.
type PolicyInformationPoints struct {
	ExternalInformationPoint bool         `json:"externalInformationPoint"`
	InternalInformationPoint *[]Reference `json:"internalInformationPoint,omitempty"`
}

// Property defines model for Property.
type Property struct {
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
	Value                      *string                      `json:"value,omitempty"`
	ValueId                    *Reference                   `json:"valueId,omitempty"`
	ValueType                  *PropertyValueType           `json:"valueType,omitempty"`
}

// PropertyValueType defines model for Property.ValueType.
type PropertyValueType string

// Qualifiable defines model for Qualifiable.
type Qualifiable struct {
	Qualifiers *[]Constraint `json:"qualifiers,omitempty"`
}

// Range defines model for Range.
type Range struct {
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	Max                        string                       `json:"max"`
	Min                        string                       `json:"min"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
	ValueType                  RangeValueType               `json:"valueType"`
}

// RangeValueType defines model for Range.ValueType.
type RangeValueType string

// Referable defines model for Referable.
type Referable struct {
	Category    *string       `json:"category,omitempty"`
	Description *[]LangString `json:"description,omitempty"`
	IdShort     string        `json:"idShort"`
	ModelType   ModelType     `json:"modelType"`
	Parent      *Reference    `json:"parent,omitempty"`
}

// Reference defines model for Reference.
type Reference struct {
	Keys []Key `json:"keys"`
}

// ReferenceElement defines model for ReferenceElement.
type ReferenceElement struct {
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
	Value                      *Reference                   `json:"value,omitempty"`
}

// RelationshipElement defines model for RelationshipElement.
type RelationshipElement struct {
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	First                      Reference                    `json:"first"`
	IdShort                    string                       `json:"idShort"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	Second                     Reference                    `json:"second"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
}

// Result defines model for Result.
type Result struct {
	Entity      *map[string]interface{} `json:"entity,omitempty"`
	EntityType  *string                 `json:"entityType,omitempty"`
	IsException *bool                   `json:"isException,omitempty"`
	Messages    *[]Message              `json:"messages,omitempty"`
	Success     *bool                   `json:"success,omitempty"`
}

// Security defines model for Security.
type Security struct {
	AccessControlPolicyPoints    AccessControlPolicyPoints    `json:"accessControlPolicyPoints"`
	Certificate                  *[]Security_Certificate_Item `json:"certificate,omitempty"`
	RequiredCertificateExtension *[]Reference                 `json:"requiredCertificateExtension,omitempty"`
}

// Security_Certificate_Item defines model for Security.certificate.Item.
type Security_Certificate_Item struct {
	union json.RawMessage
}

// SubjectAttributes defines model for SubjectAttributes.
type SubjectAttributes struct {
	SubjectAttributes *[]Reference `json:"subjectAttributes,omitempty"`
}

// Submodel defines model for Submodel.
type Submodel struct {
	Administration             *AdministrativeInformation   `json:"administration,omitempty"`
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	Identification             Identifier                   `json:"identification"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
	SubmodelElements           *[]SubmodelElement           `json:"submodelElements,omitempty"`
}

// SubmodelElement defines model for SubmodelElement.
type SubmodelElement struct {
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	Kind                       *ModelingKind                `json:"kind,omitempty"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
}

// SubmodelElementCollection defines model for SubmodelElementCollection.
type SubmodelElementCollection struct {
	AllowDuplicates            *bool                                   `json:"allowDuplicates,omitempty"`
	Category                   *string                                 `json:"category,omitempty"`
	Description                *[]LangString                           `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification            `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                                  `json:"idShort"`
	Kind                       *ModelingKind                           `json:"kind,omitempty"`
	ModelType                  ModelType                               `json:"modelType"`
	Ordered                    *bool                                   `json:"ordered,omitempty"`
	Parent                     *Reference                              `json:"parent,omitempty"`
	Qualifiers                 *[]Constraint                           `json:"qualifiers,omitempty"`
	SemanticId                 *Reference                              `json:"semanticId,omitempty"`
	Value                      *[]SubmodelElementCollection_Value_Item `json:"value,omitempty"`
}

// SubmodelElementCollection_Value_Item defines model for SubmodelElementCollection.value.Item.
type SubmodelElementCollection_Value_Item struct {
	union json.RawMessage
}

// ValueList defines model for ValueList.
type ValueList struct {
	ValueReferencePairTypes []ValueReferencePairType `json:"valueReferencePairTypes"`
}

// ValueObject defines model for ValueObject.
type ValueObject struct {
	Value     *string               `json:"value,omitempty"`
	ValueId   *Reference            `json:"valueId,omitempty"`
	ValueType *ValueObjectValueType `json:"valueType,omitempty"`
}

// ValueObjectValueType defines model for ValueObject.ValueType.
type ValueObjectValueType string

// ValueReferencePairType defines model for ValueReferencePairType.
type ValueReferencePairType = ValueObject

// View defines model for View.
type View struct {
	Category                   *string                      `json:"category,omitempty"`
	ContainedElements          *[]Reference                 `json:"containedElements,omitempty"`
	Description                *[]LangString                `json:"description,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    string                       `json:"idShort"`
	ModelType                  ModelType                    `json:"modelType"`
	Parent                     *Reference                   `json:"parent,omitempty"`
	SemanticId                 *Reference                   `json:"semanticId,omitempty"`
}

// ShellRepoInvokeOperationByIdShortParams defines parameters for ShellRepoInvokeOperationByIdShort.
type ShellRepoInvokeOperationByIdShortParams struct {
	// Async Determines whether the execution of the operation is asynchronous (true) or not (false)
	Async *bool `form:"async,omitempty" json:"async,omitempty"`
}

// ShellRepoPutSubmodelElementValueByIdShortJSONBody defines parameters for ShellRepoPutSubmodelElementValueByIdShort.
type ShellRepoPutSubmodelElementValueByIdShortJSONBody = map[string]interface{}

// PutAssetAdministrationShellJSONRequestBody defines body for PutAssetAdministrationShell for application/json ContentType.
type PutAssetAdministrationShellJSONRequestBody = AssetAdministrationShell

// ShellRepoPutSubmodelToShellJSONRequestBody defines body for ShellRepoPutSubmodelToShell for application/json ContentType.
type ShellRepoPutSubmodelToShellJSONRequestBody = Submodel

// ShellRepoInvokeOperationByIdShortJSONRequestBody defines body for ShellRepoInvokeOperationByIdShort for application/json ContentType.
type ShellRepoInvokeOperationByIdShortJSONRequestBody = InvocationRequest

// ShellRepoPutSubmodelElementJSONRequestBody defines body for ShellRepoPutSubmodelElement for application/json ContentType.
type ShellRepoPutSubmodelElementJSONRequestBody = SubmodelElement

// ShellRepoPutSubmodelElementValueByIdShortJSONRequestBody defines body for ShellRepoPutSubmodelElementValueByIdShort for application/json ContentType.
type ShellRepoPutSubmodelElementValueByIdShortJSONRequestBody = ShellRepoPutSubmodelElementValueByIdShortJSONBody

// AsDataSpecificationIEC61360Content returns the union data inside the DataSpecificationContent as a DataSpecificationIEC61360Content
func (t DataSpecificationContent) AsDataSpecificationIEC61360Content() (DataSpecificationIEC61360Content, error) {
	var body DataSpecificationIEC61360Content
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataSpecificationIEC61360Content overwrites any union data inside the DataSpecificationContent as the provided DataSpecificationIEC61360Content
func (t *DataSpecificationContent) FromDataSpecificationIEC61360Content(v DataSpecificationIEC61360Content) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataSpecificationIEC61360Content performs a merge with any union data inside the DataSpecificationContent, using the provided DataSpecificationIEC61360Content
func (t *DataSpecificationContent) MergeDataSpecificationIEC61360Content(v DataSpecificationIEC61360Content) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataSpecificationPhysicalUnitContent returns the union data inside the DataSpecificationContent as a DataSpecificationPhysicalUnitContent
func (t DataSpecificationContent) AsDataSpecificationPhysicalUnitContent() (DataSpecificationPhysicalUnitContent, error) {
	var body DataSpecificationPhysicalUnitContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataSpecificationPhysicalUnitContent overwrites any union data inside the DataSpecificationContent as the provided DataSpecificationPhysicalUnitContent
func (t *DataSpecificationContent) FromDataSpecificationPhysicalUnitContent(v DataSpecificationPhysicalUnitContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataSpecificationPhysicalUnitContent performs a merge with any union data inside the DataSpecificationContent, using the provided DataSpecificationPhysicalUnitContent
func (t *DataSpecificationContent) MergeDataSpecificationPhysicalUnitContent(v DataSpecificationPhysicalUnitContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataSpecificationContent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataSpecificationContent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBlob returns the union data inside the OperationVariable_Value as a Blob
func (t OperationVariable_Value) AsBlob() (Blob, error) {
	var body Blob
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlob overwrites any union data inside the OperationVariable_Value as the provided Blob
func (t *OperationVariable_Value) FromBlob(v Blob) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlob performs a merge with any union data inside the OperationVariable_Value, using the provided Blob
func (t *OperationVariable_Value) MergeBlob(v Blob) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsFile returns the union data inside the OperationVariable_Value as a File
func (t OperationVariable_Value) AsFile() (File, error) {
	var body File
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFile overwrites any union data inside the OperationVariable_Value as the provided File
func (t *OperationVariable_Value) FromFile(v File) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFile performs a merge with any union data inside the OperationVariable_Value, using the provided File
func (t *OperationVariable_Value) MergeFile(v File) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCapability returns the union data inside the OperationVariable_Value as a Capability
func (t OperationVariable_Value) AsCapability() (Capability, error) {
	var body Capability
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCapability overwrites any union data inside the OperationVariable_Value as the provided Capability
func (t *OperationVariable_Value) FromCapability(v Capability) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCapability performs a merge with any union data inside the OperationVariable_Value, using the provided Capability
func (t *OperationVariable_Value) MergeCapability(v Capability) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntity returns the union data inside the OperationVariable_Value as a Entity
func (t OperationVariable_Value) AsEntity() (Entity, error) {
	var body Entity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntity overwrites any union data inside the OperationVariable_Value as the provided Entity
func (t *OperationVariable_Value) FromEntity(v Entity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntity performs a merge with any union data inside the OperationVariable_Value, using the provided Entity
func (t *OperationVariable_Value) MergeEntity(v Entity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEvent returns the union data inside the OperationVariable_Value as a Event
func (t OperationVariable_Value) AsEvent() (Event, error) {
	var body Event
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvent overwrites any union data inside the OperationVariable_Value as the provided Event
func (t *OperationVariable_Value) FromEvent(v Event) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvent performs a merge with any union data inside the OperationVariable_Value, using the provided Event
func (t *OperationVariable_Value) MergeEvent(v Event) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsBasicEvent returns the union data inside the OperationVariable_Value as a BasicEvent
func (t OperationVariable_Value) AsBasicEvent() (BasicEvent, error) {
	var body BasicEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBasicEvent overwrites any union data inside the OperationVariable_Value as the provided BasicEvent
func (t *OperationVariable_Value) FromBasicEvent(v BasicEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBasicEvent performs a merge with any union data inside the OperationVariable_Value, using the provided BasicEvent
func (t *OperationVariable_Value) MergeBasicEvent(v BasicEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultiLanguageProperty returns the union data inside the OperationVariable_Value as a MultiLanguageProperty
func (t OperationVariable_Value) AsMultiLanguageProperty() (MultiLanguageProperty, error) {
	var body MultiLanguageProperty
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiLanguageProperty overwrites any union data inside the OperationVariable_Value as the provided MultiLanguageProperty
func (t *OperationVariable_Value) FromMultiLanguageProperty(v MultiLanguageProperty) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiLanguageProperty performs a merge with any union data inside the OperationVariable_Value, using the provided MultiLanguageProperty
func (t *OperationVariable_Value) MergeMultiLanguageProperty(v MultiLanguageProperty) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOperation returns the union data inside the OperationVariable_Value as a Operation
func (t OperationVariable_Value) AsOperation() (Operation, error) {
	var body Operation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperation overwrites any union data inside the OperationVariable_Value as the provided Operation
func (t *OperationVariable_Value) FromOperation(v Operation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperation performs a merge with any union data inside the OperationVariable_Value, using the provided Operation
func (t *OperationVariable_Value) MergeOperation(v Operation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsProperty returns the union data inside the OperationVariable_Value as a Property
func (t OperationVariable_Value) AsProperty() (Property, error) {
	var body Property
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProperty overwrites any union data inside the OperationVariable_Value as the provided Property
func (t *OperationVariable_Value) FromProperty(v Property) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProperty performs a merge with any union data inside the OperationVariable_Value, using the provided Property
func (t *OperationVariable_Value) MergeProperty(v Property) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsRange returns the union data inside the OperationVariable_Value as a Range
func (t OperationVariable_Value) AsRange() (Range, error) {
	var body Range
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRange overwrites any union data inside the OperationVariable_Value as the provided Range
func (t *OperationVariable_Value) FromRange(v Range) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRange performs a merge with any union data inside the OperationVariable_Value, using the provided Range
func (t *OperationVariable_Value) MergeRange(v Range) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceElement returns the union data inside the OperationVariable_Value as a ReferenceElement
func (t OperationVariable_Value) AsReferenceElement() (ReferenceElement, error) {
	var body ReferenceElement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceElement overwrites any union data inside the OperationVariable_Value as the provided ReferenceElement
func (t *OperationVariable_Value) FromReferenceElement(v ReferenceElement) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceElement performs a merge with any union data inside the OperationVariable_Value, using the provided ReferenceElement
func (t *OperationVariable_Value) MergeReferenceElement(v ReferenceElement) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelationshipElement returns the union data inside the OperationVariable_Value as a RelationshipElement
func (t OperationVariable_Value) AsRelationshipElement() (RelationshipElement, error) {
	var body RelationshipElement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelationshipElement overwrites any union data inside the OperationVariable_Value as the provided RelationshipElement
func (t *OperationVariable_Value) FromRelationshipElement(v RelationshipElement) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelationshipElement performs a merge with any union data inside the OperationVariable_Value, using the provided RelationshipElement
func (t *OperationVariable_Value) MergeRelationshipElement(v RelationshipElement) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSubmodelElementCollection returns the union data inside the OperationVariable_Value as a SubmodelElementCollection
func (t OperationVariable_Value) AsSubmodelElementCollection() (SubmodelElementCollection, error) {
	var body SubmodelElementCollection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubmodelElementCollection overwrites any union data inside the OperationVariable_Value as the provided SubmodelElementCollection
func (t *OperationVariable_Value) FromSubmodelElementCollection(v SubmodelElementCollection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubmodelElementCollection performs a merge with any union data inside the OperationVariable_Value, using the provided SubmodelElementCollection
func (t *OperationVariable_Value) MergeSubmodelElementCollection(v SubmodelElementCollection) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t OperationVariable_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OperationVariable_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBlobCertificate returns the union data inside the Security_Certificate_Item as a BlobCertificate
func (t Security_Certificate_Item) AsBlobCertificate() (BlobCertificate, error) {
	var body BlobCertificate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlobCertificate overwrites any union data inside the Security_Certificate_Item as the provided BlobCertificate
func (t *Security_Certificate_Item) FromBlobCertificate(v BlobCertificate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlobCertificate performs a merge with any union data inside the Security_Certificate_Item, using the provided BlobCertificate
func (t *Security_Certificate_Item) MergeBlobCertificate(v BlobCertificate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Security_Certificate_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Security_Certificate_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBlob returns the union data inside the SubmodelElementCollection_Value_Item as a Blob
func (t SubmodelElementCollection_Value_Item) AsBlob() (Blob, error) {
	var body Blob
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlob overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided Blob
func (t *SubmodelElementCollection_Value_Item) FromBlob(v Blob) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlob performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided Blob
func (t *SubmodelElementCollection_Value_Item) MergeBlob(v Blob) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsFile returns the union data inside the SubmodelElementCollection_Value_Item as a File
func (t SubmodelElementCollection_Value_Item) AsFile() (File, error) {
	var body File
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFile overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided File
func (t *SubmodelElementCollection_Value_Item) FromFile(v File) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFile performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided File
func (t *SubmodelElementCollection_Value_Item) MergeFile(v File) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCapability returns the union data inside the SubmodelElementCollection_Value_Item as a Capability
func (t SubmodelElementCollection_Value_Item) AsCapability() (Capability, error) {
	var body Capability
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCapability overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided Capability
func (t *SubmodelElementCollection_Value_Item) FromCapability(v Capability) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCapability performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided Capability
func (t *SubmodelElementCollection_Value_Item) MergeCapability(v Capability) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntity returns the union data inside the SubmodelElementCollection_Value_Item as a Entity
func (t SubmodelElementCollection_Value_Item) AsEntity() (Entity, error) {
	var body Entity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntity overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided Entity
func (t *SubmodelElementCollection_Value_Item) FromEntity(v Entity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntity performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided Entity
func (t *SubmodelElementCollection_Value_Item) MergeEntity(v Entity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEvent returns the union data inside the SubmodelElementCollection_Value_Item as a Event
func (t SubmodelElementCollection_Value_Item) AsEvent() (Event, error) {
	var body Event
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvent overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided Event
func (t *SubmodelElementCollection_Value_Item) FromEvent(v Event) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvent performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided Event
func (t *SubmodelElementCollection_Value_Item) MergeEvent(v Event) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsBasicEvent returns the union data inside the SubmodelElementCollection_Value_Item as a BasicEvent
func (t SubmodelElementCollection_Value_Item) AsBasicEvent() (BasicEvent, error) {
	var body BasicEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBasicEvent overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided BasicEvent
func (t *SubmodelElementCollection_Value_Item) FromBasicEvent(v BasicEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBasicEvent performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided BasicEvent
func (t *SubmodelElementCollection_Value_Item) MergeBasicEvent(v BasicEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultiLanguageProperty returns the union data inside the SubmodelElementCollection_Value_Item as a MultiLanguageProperty
func (t SubmodelElementCollection_Value_Item) AsMultiLanguageProperty() (MultiLanguageProperty, error) {
	var body MultiLanguageProperty
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiLanguageProperty overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided MultiLanguageProperty
func (t *SubmodelElementCollection_Value_Item) FromMultiLanguageProperty(v MultiLanguageProperty) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiLanguageProperty performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided MultiLanguageProperty
func (t *SubmodelElementCollection_Value_Item) MergeMultiLanguageProperty(v MultiLanguageProperty) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOperation returns the union data inside the SubmodelElementCollection_Value_Item as a Operation
func (t SubmodelElementCollection_Value_Item) AsOperation() (Operation, error) {
	var body Operation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperation overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided Operation
func (t *SubmodelElementCollection_Value_Item) FromOperation(v Operation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperation performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided Operation
func (t *SubmodelElementCollection_Value_Item) MergeOperation(v Operation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsProperty returns the union data inside the SubmodelElementCollection_Value_Item as a Property
func (t SubmodelElementCollection_Value_Item) AsProperty() (Property, error) {
	var body Property
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProperty overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided Property
func (t *SubmodelElementCollection_Value_Item) FromProperty(v Property) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProperty performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided Property
func (t *SubmodelElementCollection_Value_Item) MergeProperty(v Property) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsRange returns the union data inside the SubmodelElementCollection_Value_Item as a Range
func (t SubmodelElementCollection_Value_Item) AsRange() (Range, error) {
	var body Range
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRange overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided Range
func (t *SubmodelElementCollection_Value_Item) FromRange(v Range) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRange performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided Range
func (t *SubmodelElementCollection_Value_Item) MergeRange(v Range) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceElement returns the union data inside the SubmodelElementCollection_Value_Item as a ReferenceElement
func (t SubmodelElementCollection_Value_Item) AsReferenceElement() (ReferenceElement, error) {
	var body ReferenceElement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceElement overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided ReferenceElement
func (t *SubmodelElementCollection_Value_Item) FromReferenceElement(v ReferenceElement) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceElement performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided ReferenceElement
func (t *SubmodelElementCollection_Value_Item) MergeReferenceElement(v ReferenceElement) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelationshipElement returns the union data inside the SubmodelElementCollection_Value_Item as a RelationshipElement
func (t SubmodelElementCollection_Value_Item) AsRelationshipElement() (RelationshipElement, error) {
	var body RelationshipElement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelationshipElement overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided RelationshipElement
func (t *SubmodelElementCollection_Value_Item) FromRelationshipElement(v RelationshipElement) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelationshipElement performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided RelationshipElement
func (t *SubmodelElementCollection_Value_Item) MergeRelationshipElement(v RelationshipElement) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSubmodelElementCollection returns the union data inside the SubmodelElementCollection_Value_Item as a SubmodelElementCollection
func (t SubmodelElementCollection_Value_Item) AsSubmodelElementCollection() (SubmodelElementCollection, error) {
	var body SubmodelElementCollection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubmodelElementCollection overwrites any union data inside the SubmodelElementCollection_Value_Item as the provided SubmodelElementCollection
func (t *SubmodelElementCollection_Value_Item) FromSubmodelElementCollection(v SubmodelElementCollection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubmodelElementCollection performs a merge with any union data inside the SubmodelElementCollection_Value_Item, using the provided SubmodelElementCollection
func (t *SubmodelElementCollection_Value_Item) MergeSubmodelElementCollection(v SubmodelElementCollection) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SubmodelElementCollection_Value_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SubmodelElementCollection_Value_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllAssetAdministrationShells request
	GetAllAssetAdministrationShells(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAssetAdministrationShellById request
	DeleteAssetAdministrationShellById(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShellsAasId request
	GetShellsAasId(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAssetAdministrationShellWithBody request with any body
	PutAssetAdministrationShellWithBody(ctx context.Context, aasId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAssetAdministrationShell(ctx context.Context, aasId string, body PutAssetAdministrationShellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetAdministrationShellById request
	GetAssetAdministrationShellById(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoGetSubmodelsFromShell request
	ShellRepoGetSubmodelsFromShell(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoDeleteSubmodelFromShellByIdShort request
	ShellRepoDeleteSubmodelFromShellByIdShort(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShellsAasIdAasSubmodelsSubmodelIdShort request
	GetShellsAasIdAasSubmodelsSubmodelIdShort(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoPutSubmodelToShellWithBody request with any body
	ShellRepoPutSubmodelToShellWithBody(ctx context.Context, aasId string, submodelIdShort string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShellRepoPutSubmodelToShell(ctx context.Context, aasId string, submodelIdShort string, body ShellRepoPutSubmodelToShellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoGetSubmodelFromShellByIdShort request
	ShellRepoGetSubmodelFromShellByIdShort(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoGetSubmodelElements request
	ShellRepoGetSubmodelElements(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoGetInvocationResultByIdShort request
	ShellRepoGetInvocationResultByIdShort(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoInvokeOperationByIdShortWithBody request with any body
	ShellRepoInvokeOperationByIdShortWithBody(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, params *ShellRepoInvokeOperationByIdShortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShellRepoInvokeOperationByIdShort(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, params *ShellRepoInvokeOperationByIdShortParams, body ShellRepoInvokeOperationByIdShortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoDeleteSubmodelElementByIdShort request
	ShellRepoDeleteSubmodelElementByIdShort(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoGetSubmodelElementByIdShort request
	ShellRepoGetSubmodelElementByIdShort(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoPutSubmodelElementWithBody request with any body
	ShellRepoPutSubmodelElementWithBody(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShellRepoPutSubmodelElement(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, body ShellRepoPutSubmodelElementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoGetSubmodelElementValueByIdShort request
	ShellRepoGetSubmodelElementValueByIdShort(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoPutSubmodelElementValueByIdShortWithBody request with any body
	ShellRepoPutSubmodelElementValueByIdShortWithBody(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShellRepoPutSubmodelElementValueByIdShort(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, body ShellRepoPutSubmodelElementValueByIdShortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShellRepoGetSubmodelValues request
	ShellRepoGetSubmodelValues(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllAssetAdministrationShells(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAssetAdministrationShellsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAssetAdministrationShellById(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAssetAdministrationShellByIdRequest(c.Server, aasId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShellsAasId(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShellsAasIdRequest(c.Server, aasId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssetAdministrationShellWithBody(ctx context.Context, aasId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssetAdministrationShellRequestWithBody(c.Server, aasId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssetAdministrationShell(ctx context.Context, aasId string, body PutAssetAdministrationShellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssetAdministrationShellRequest(c.Server, aasId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetAdministrationShellById(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetAdministrationShellByIdRequest(c.Server, aasId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoGetSubmodelsFromShell(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoGetSubmodelsFromShellRequest(c.Server, aasId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoDeleteSubmodelFromShellByIdShort(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoDeleteSubmodelFromShellByIdShortRequest(c.Server, aasId, submodelIdShort)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShellsAasIdAasSubmodelsSubmodelIdShort(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShellsAasIdAasSubmodelsSubmodelIdShortRequest(c.Server, aasId, submodelIdShort)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoPutSubmodelToShellWithBody(ctx context.Context, aasId string, submodelIdShort string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoPutSubmodelToShellRequestWithBody(c.Server, aasId, submodelIdShort, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoPutSubmodelToShell(ctx context.Context, aasId string, submodelIdShort string, body ShellRepoPutSubmodelToShellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoPutSubmodelToShellRequest(c.Server, aasId, submodelIdShort, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoGetSubmodelFromShellByIdShort(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoGetSubmodelFromShellByIdShortRequest(c.Server, aasId, submodelIdShort)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoGetSubmodelElements(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoGetSubmodelElementsRequest(c.Server, aasId, submodelIdShort)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoGetInvocationResultByIdShort(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoGetInvocationResultByIdShortRequest(c.Server, aasId, submodelIdShort, idShortPathToOperation, requestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoInvokeOperationByIdShortWithBody(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, params *ShellRepoInvokeOperationByIdShortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoInvokeOperationByIdShortRequestWithBody(c.Server, aasId, submodelIdShort, idShortPathToOperation, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoInvokeOperationByIdShort(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, params *ShellRepoInvokeOperationByIdShortParams, body ShellRepoInvokeOperationByIdShortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoInvokeOperationByIdShortRequest(c.Server, aasId, submodelIdShort, idShortPathToOperation, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoDeleteSubmodelElementByIdShort(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoDeleteSubmodelElementByIdShortRequest(c.Server, aasId, submodelIdShort, seIdShortPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoGetSubmodelElementByIdShort(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoGetSubmodelElementByIdShortRequest(c.Server, aasId, submodelIdShort, seIdShortPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoPutSubmodelElementWithBody(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoPutSubmodelElementRequestWithBody(c.Server, aasId, submodelIdShort, seIdShortPath, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoPutSubmodelElement(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, body ShellRepoPutSubmodelElementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoPutSubmodelElementRequest(c.Server, aasId, submodelIdShort, seIdShortPath, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoGetSubmodelElementValueByIdShort(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoGetSubmodelElementValueByIdShortRequest(c.Server, aasId, submodelIdShort, seIdShortPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoPutSubmodelElementValueByIdShortWithBody(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoPutSubmodelElementValueByIdShortRequestWithBody(c.Server, aasId, submodelIdShort, seIdShortPath, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoPutSubmodelElementValueByIdShort(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, body ShellRepoPutSubmodelElementValueByIdShortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoPutSubmodelElementValueByIdShortRequest(c.Server, aasId, submodelIdShort, seIdShortPath, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShellRepoGetSubmodelValues(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShellRepoGetSubmodelValuesRequest(c.Server, aasId, submodelIdShort)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllAssetAdministrationShellsRequest generates requests for GetAllAssetAdministrationShells
func NewGetAllAssetAdministrationShellsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAssetAdministrationShellByIdRequest generates requests for DeleteAssetAdministrationShellById
func NewDeleteAssetAdministrationShellByIdRequest(server string, aasId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShellsAasIdRequest generates requests for GetShellsAasId
func NewGetShellsAasIdRequest(server string, aasId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAssetAdministrationShellRequest calls the generic PutAssetAdministrationShell builder with application/json body
func NewPutAssetAdministrationShellRequest(server string, aasId string, body PutAssetAdministrationShellJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAssetAdministrationShellRequestWithBody(server, aasId, "application/json", bodyReader)
}

// NewPutAssetAdministrationShellRequestWithBody generates requests for PutAssetAdministrationShell with any type of body
func NewPutAssetAdministrationShellRequestWithBody(server string, aasId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAssetAdministrationShellByIdRequest generates requests for GetAssetAdministrationShellById
func NewGetAssetAdministrationShellByIdRequest(server string, aasId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShellRepoGetSubmodelsFromShellRequest generates requests for ShellRepoGetSubmodelsFromShell
func NewShellRepoGetSubmodelsFromShellRequest(server string, aasId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShellRepoDeleteSubmodelFromShellByIdShortRequest generates requests for ShellRepoDeleteSubmodelFromShellByIdShort
func NewShellRepoDeleteSubmodelFromShellByIdShortRequest(server string, aasId string, submodelIdShort string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShellsAasIdAasSubmodelsSubmodelIdShortRequest generates requests for GetShellsAasIdAasSubmodelsSubmodelIdShort
func NewGetShellsAasIdAasSubmodelsSubmodelIdShortRequest(server string, aasId string, submodelIdShort string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShellRepoPutSubmodelToShellRequest calls the generic ShellRepoPutSubmodelToShell builder with application/json body
func NewShellRepoPutSubmodelToShellRequest(server string, aasId string, submodelIdShort string, body ShellRepoPutSubmodelToShellJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShellRepoPutSubmodelToShellRequestWithBody(server, aasId, submodelIdShort, "application/json", bodyReader)
}

// NewShellRepoPutSubmodelToShellRequestWithBody generates requests for ShellRepoPutSubmodelToShell with any type of body
func NewShellRepoPutSubmodelToShellRequestWithBody(server string, aasId string, submodelIdShort string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShellRepoGetSubmodelFromShellByIdShortRequest generates requests for ShellRepoGetSubmodelFromShellByIdShort
func NewShellRepoGetSubmodelFromShellByIdShortRequest(server string, aasId string, submodelIdShort string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s/submodel", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShellRepoGetSubmodelElementsRequest generates requests for ShellRepoGetSubmodelElements
func NewShellRepoGetSubmodelElementsRequest(server string, aasId string, submodelIdShort string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s/submodel/submodelElements", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShellRepoGetInvocationResultByIdShortRequest generates requests for ShellRepoGetInvocationResultByIdShort
func NewShellRepoGetInvocationResultByIdShortRequest(server string, aasId string, submodelIdShort string, idShortPathToOperation string, requestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "idShortPathToOperation", runtime.ParamLocationPath, idShortPathToOperation)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s/submodel/submodelElements/%s/invocationList/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShellRepoInvokeOperationByIdShortRequest calls the generic ShellRepoInvokeOperationByIdShort builder with application/json body
func NewShellRepoInvokeOperationByIdShortRequest(server string, aasId string, submodelIdShort string, idShortPathToOperation string, params *ShellRepoInvokeOperationByIdShortParams, body ShellRepoInvokeOperationByIdShortJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShellRepoInvokeOperationByIdShortRequestWithBody(server, aasId, submodelIdShort, idShortPathToOperation, params, "application/json", bodyReader)
}

// NewShellRepoInvokeOperationByIdShortRequestWithBody generates requests for ShellRepoInvokeOperationByIdShort with any type of body
func NewShellRepoInvokeOperationByIdShortRequestWithBody(server string, aasId string, submodelIdShort string, idShortPathToOperation string, params *ShellRepoInvokeOperationByIdShortParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "idShortPathToOperation", runtime.ParamLocationPath, idShortPathToOperation)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s/submodel/submodelElements/%s/invoke", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Async != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "async", runtime.ParamLocationQuery, *params.Async); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShellRepoDeleteSubmodelElementByIdShortRequest generates requests for ShellRepoDeleteSubmodelElementByIdShort
func NewShellRepoDeleteSubmodelElementByIdShortRequest(server string, aasId string, submodelIdShort string, seIdShortPath string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "seIdShortPath", runtime.ParamLocationPath, seIdShortPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s/submodel/submodelElements/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShellRepoGetSubmodelElementByIdShortRequest generates requests for ShellRepoGetSubmodelElementByIdShort
func NewShellRepoGetSubmodelElementByIdShortRequest(server string, aasId string, submodelIdShort string, seIdShortPath string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "seIdShortPath", runtime.ParamLocationPath, seIdShortPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s/submodel/submodelElements/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShellRepoPutSubmodelElementRequest calls the generic ShellRepoPutSubmodelElement builder with application/json body
func NewShellRepoPutSubmodelElementRequest(server string, aasId string, submodelIdShort string, seIdShortPath string, body ShellRepoPutSubmodelElementJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShellRepoPutSubmodelElementRequestWithBody(server, aasId, submodelIdShort, seIdShortPath, "application/json", bodyReader)
}

// NewShellRepoPutSubmodelElementRequestWithBody generates requests for ShellRepoPutSubmodelElement with any type of body
func NewShellRepoPutSubmodelElementRequestWithBody(server string, aasId string, submodelIdShort string, seIdShortPath string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "seIdShortPath", runtime.ParamLocationPath, seIdShortPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s/submodel/submodelElements/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShellRepoGetSubmodelElementValueByIdShortRequest generates requests for ShellRepoGetSubmodelElementValueByIdShort
func NewShellRepoGetSubmodelElementValueByIdShortRequest(server string, aasId string, submodelIdShort string, seIdShortPath string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "seIdShortPath", runtime.ParamLocationPath, seIdShortPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s/submodel/submodelElements/%s/value", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShellRepoPutSubmodelElementValueByIdShortRequest calls the generic ShellRepoPutSubmodelElementValueByIdShort builder with application/json body
func NewShellRepoPutSubmodelElementValueByIdShortRequest(server string, aasId string, submodelIdShort string, seIdShortPath string, body ShellRepoPutSubmodelElementValueByIdShortJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShellRepoPutSubmodelElementValueByIdShortRequestWithBody(server, aasId, submodelIdShort, seIdShortPath, "application/json", bodyReader)
}

// NewShellRepoPutSubmodelElementValueByIdShortRequestWithBody generates requests for ShellRepoPutSubmodelElementValueByIdShort with any type of body
func NewShellRepoPutSubmodelElementValueByIdShortRequestWithBody(server string, aasId string, submodelIdShort string, seIdShortPath string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "seIdShortPath", runtime.ParamLocationPath, seIdShortPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s/submodel/submodelElements/%s/value", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShellRepoGetSubmodelValuesRequest generates requests for ShellRepoGetSubmodelValues
func NewShellRepoGetSubmodelValuesRequest(server string, aasId string, submodelIdShort string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aasId", runtime.ParamLocationPath, aasId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, submodelIdShort)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shells/%s/aas/submodels/%s/submodel/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllAssetAdministrationShellsWithResponse request
	GetAllAssetAdministrationShellsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllAssetAdministrationShellsResponse, error)

	// DeleteAssetAdministrationShellByIdWithResponse request
	DeleteAssetAdministrationShellByIdWithResponse(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*DeleteAssetAdministrationShellByIdResponse, error)

	// GetShellsAasIdWithResponse request
	GetShellsAasIdWithResponse(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*GetShellsAasIdResponse, error)

	// PutAssetAdministrationShellWithBodyWithResponse request with any body
	PutAssetAdministrationShellWithBodyWithResponse(ctx context.Context, aasId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssetAdministrationShellResponse, error)

	PutAssetAdministrationShellWithResponse(ctx context.Context, aasId string, body PutAssetAdministrationShellJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssetAdministrationShellResponse, error)

	// GetAssetAdministrationShellByIdWithResponse request
	GetAssetAdministrationShellByIdWithResponse(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*GetAssetAdministrationShellByIdResponse, error)

	// ShellRepoGetSubmodelsFromShellWithResponse request
	ShellRepoGetSubmodelsFromShellWithResponse(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelsFromShellResponse, error)

	// ShellRepoDeleteSubmodelFromShellByIdShortWithResponse request
	ShellRepoDeleteSubmodelFromShellByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*ShellRepoDeleteSubmodelFromShellByIdShortResponse, error)

	// GetShellsAasIdAasSubmodelsSubmodelIdShortWithResponse request
	GetShellsAasIdAasSubmodelsSubmodelIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*GetShellsAasIdAasSubmodelsSubmodelIdShortResponse, error)

	// ShellRepoPutSubmodelToShellWithBodyWithResponse request with any body
	ShellRepoPutSubmodelToShellWithBodyWithResponse(ctx context.Context, aasId string, submodelIdShort string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelToShellResponse, error)

	ShellRepoPutSubmodelToShellWithResponse(ctx context.Context, aasId string, submodelIdShort string, body ShellRepoPutSubmodelToShellJSONRequestBody, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelToShellResponse, error)

	// ShellRepoGetSubmodelFromShellByIdShortWithResponse request
	ShellRepoGetSubmodelFromShellByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelFromShellByIdShortResponse, error)

	// ShellRepoGetSubmodelElementsWithResponse request
	ShellRepoGetSubmodelElementsWithResponse(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelElementsResponse, error)

	// ShellRepoGetInvocationResultByIdShortWithResponse request
	ShellRepoGetInvocationResultByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, requestId string, reqEditors ...RequestEditorFn) (*ShellRepoGetInvocationResultByIdShortResponse, error)

	// ShellRepoInvokeOperationByIdShortWithBodyWithResponse request with any body
	ShellRepoInvokeOperationByIdShortWithBodyWithResponse(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, params *ShellRepoInvokeOperationByIdShortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShellRepoInvokeOperationByIdShortResponse, error)

	ShellRepoInvokeOperationByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, params *ShellRepoInvokeOperationByIdShortParams, body ShellRepoInvokeOperationByIdShortJSONRequestBody, reqEditors ...RequestEditorFn) (*ShellRepoInvokeOperationByIdShortResponse, error)

	// ShellRepoDeleteSubmodelElementByIdShortWithResponse request
	ShellRepoDeleteSubmodelElementByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*ShellRepoDeleteSubmodelElementByIdShortResponse, error)

	// ShellRepoGetSubmodelElementByIdShortWithResponse request
	ShellRepoGetSubmodelElementByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelElementByIdShortResponse, error)

	// ShellRepoPutSubmodelElementWithBodyWithResponse request with any body
	ShellRepoPutSubmodelElementWithBodyWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelElementResponse, error)

	ShellRepoPutSubmodelElementWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, body ShellRepoPutSubmodelElementJSONRequestBody, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelElementResponse, error)

	// ShellRepoGetSubmodelElementValueByIdShortWithResponse request
	ShellRepoGetSubmodelElementValueByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelElementValueByIdShortResponse, error)

	// ShellRepoPutSubmodelElementValueByIdShortWithBodyWithResponse request with any body
	ShellRepoPutSubmodelElementValueByIdShortWithBodyWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelElementValueByIdShortResponse, error)

	ShellRepoPutSubmodelElementValueByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, body ShellRepoPutSubmodelElementValueByIdShortJSONRequestBody, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelElementValueByIdShortResponse, error)

	// ShellRepoGetSubmodelValuesWithResponse request
	ShellRepoGetSubmodelValuesWithResponse(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelValuesResponse, error)
}

type GetAllAssetAdministrationShellsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetAdministrationShell
}

// Status returns HTTPResponse.Status
func (r GetAllAssetAdministrationShellsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAssetAdministrationShellsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAssetAdministrationShellByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r DeleteAssetAdministrationShellByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAssetAdministrationShellByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShellsAasIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetAdministrationShell
}

// Status returns HTTPResponse.Status
func (r GetShellsAasIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShellsAasIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAssetAdministrationShellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AssetAdministrationShell
}

// Status returns HTTPResponse.Status
func (r PutAssetAdministrationShellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAssetAdministrationShellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetAdministrationShellByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetAdministrationShell
}

// Status returns HTTPResponse.Status
func (r GetAssetAdministrationShellByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetAdministrationShellByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoGetSubmodelsFromShellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoGetSubmodelsFromShellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoGetSubmodelsFromShellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoDeleteSubmodelFromShellByIdShortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoDeleteSubmodelFromShellByIdShortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoDeleteSubmodelFromShellByIdShortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShellsAasIdAasSubmodelsSubmodelIdShortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Submodel
	JSON400      *Result
	JSON404      *Result
}

// Status returns HTTPResponse.Status
func (r GetShellsAasIdAasSubmodelsSubmodelIdShortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShellsAasIdAasSubmodelsSubmodelIdShortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoPutSubmodelToShellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Submodel
	JSON400      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoPutSubmodelToShellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoPutSubmodelToShellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoGetSubmodelFromShellByIdShortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Submodel
	JSON400      *Result
	JSON404      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoGetSubmodelFromShellByIdShortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoGetSubmodelFromShellByIdShortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoGetSubmodelElementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SubmodelElement
	JSON404      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoGetSubmodelElementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoGetSubmodelElementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoGetInvocationResultByIdShortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvocationResponse
	JSON400      *Result
	JSON404      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoGetInvocationResultByIdShortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoGetInvocationResultByIdShortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoInvokeOperationByIdShortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Result
	JSON404      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoInvokeOperationByIdShortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoInvokeOperationByIdShortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoDeleteSubmodelElementByIdShortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoDeleteSubmodelElementByIdShortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoDeleteSubmodelElementByIdShortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoGetSubmodelElementByIdShortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmodelElement
	JSON404      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoGetSubmodelElementByIdShortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoGetSubmodelElementByIdShortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoPutSubmodelElementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SubmodelElement
	JSON400      *Result
	JSON404      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoPutSubmodelElementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoPutSubmodelElementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoGetSubmodelElementValueByIdShortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON404      *Result
	JSON405      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoGetSubmodelElementValueByIdShortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoGetSubmodelElementValueByIdShortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoPutSubmodelElementValueByIdShortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoPutSubmodelElementValueByIdShortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoPutSubmodelElementValueByIdShortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShellRepoGetSubmodelValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Result
}

// Status returns HTTPResponse.Status
func (r ShellRepoGetSubmodelValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShellRepoGetSubmodelValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllAssetAdministrationShellsWithResponse request returning *GetAllAssetAdministrationShellsResponse
func (c *ClientWithResponses) GetAllAssetAdministrationShellsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllAssetAdministrationShellsResponse, error) {
	rsp, err := c.GetAllAssetAdministrationShells(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAssetAdministrationShellsResponse(rsp)
}

// DeleteAssetAdministrationShellByIdWithResponse request returning *DeleteAssetAdministrationShellByIdResponse
func (c *ClientWithResponses) DeleteAssetAdministrationShellByIdWithResponse(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*DeleteAssetAdministrationShellByIdResponse, error) {
	rsp, err := c.DeleteAssetAdministrationShellById(ctx, aasId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAssetAdministrationShellByIdResponse(rsp)
}

// GetShellsAasIdWithResponse request returning *GetShellsAasIdResponse
func (c *ClientWithResponses) GetShellsAasIdWithResponse(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*GetShellsAasIdResponse, error) {
	rsp, err := c.GetShellsAasId(ctx, aasId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShellsAasIdResponse(rsp)
}

// PutAssetAdministrationShellWithBodyWithResponse request with arbitrary body returning *PutAssetAdministrationShellResponse
func (c *ClientWithResponses) PutAssetAdministrationShellWithBodyWithResponse(ctx context.Context, aasId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssetAdministrationShellResponse, error) {
	rsp, err := c.PutAssetAdministrationShellWithBody(ctx, aasId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssetAdministrationShellResponse(rsp)
}

func (c *ClientWithResponses) PutAssetAdministrationShellWithResponse(ctx context.Context, aasId string, body PutAssetAdministrationShellJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssetAdministrationShellResponse, error) {
	rsp, err := c.PutAssetAdministrationShell(ctx, aasId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssetAdministrationShellResponse(rsp)
}

// GetAssetAdministrationShellByIdWithResponse request returning *GetAssetAdministrationShellByIdResponse
func (c *ClientWithResponses) GetAssetAdministrationShellByIdWithResponse(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*GetAssetAdministrationShellByIdResponse, error) {
	rsp, err := c.GetAssetAdministrationShellById(ctx, aasId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetAdministrationShellByIdResponse(rsp)
}

// ShellRepoGetSubmodelsFromShellWithResponse request returning *ShellRepoGetSubmodelsFromShellResponse
func (c *ClientWithResponses) ShellRepoGetSubmodelsFromShellWithResponse(ctx context.Context, aasId string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelsFromShellResponse, error) {
	rsp, err := c.ShellRepoGetSubmodelsFromShell(ctx, aasId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoGetSubmodelsFromShellResponse(rsp)
}

// ShellRepoDeleteSubmodelFromShellByIdShortWithResponse request returning *ShellRepoDeleteSubmodelFromShellByIdShortResponse
func (c *ClientWithResponses) ShellRepoDeleteSubmodelFromShellByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*ShellRepoDeleteSubmodelFromShellByIdShortResponse, error) {
	rsp, err := c.ShellRepoDeleteSubmodelFromShellByIdShort(ctx, aasId, submodelIdShort, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoDeleteSubmodelFromShellByIdShortResponse(rsp)
}

// GetShellsAasIdAasSubmodelsSubmodelIdShortWithResponse request returning *GetShellsAasIdAasSubmodelsSubmodelIdShortResponse
func (c *ClientWithResponses) GetShellsAasIdAasSubmodelsSubmodelIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*GetShellsAasIdAasSubmodelsSubmodelIdShortResponse, error) {
	rsp, err := c.GetShellsAasIdAasSubmodelsSubmodelIdShort(ctx, aasId, submodelIdShort, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShellsAasIdAasSubmodelsSubmodelIdShortResponse(rsp)
}

// ShellRepoPutSubmodelToShellWithBodyWithResponse request with arbitrary body returning *ShellRepoPutSubmodelToShellResponse
func (c *ClientWithResponses) ShellRepoPutSubmodelToShellWithBodyWithResponse(ctx context.Context, aasId string, submodelIdShort string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelToShellResponse, error) {
	rsp, err := c.ShellRepoPutSubmodelToShellWithBody(ctx, aasId, submodelIdShort, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoPutSubmodelToShellResponse(rsp)
}

func (c *ClientWithResponses) ShellRepoPutSubmodelToShellWithResponse(ctx context.Context, aasId string, submodelIdShort string, body ShellRepoPutSubmodelToShellJSONRequestBody, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelToShellResponse, error) {
	rsp, err := c.ShellRepoPutSubmodelToShell(ctx, aasId, submodelIdShort, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoPutSubmodelToShellResponse(rsp)
}

// ShellRepoGetSubmodelFromShellByIdShortWithResponse request returning *ShellRepoGetSubmodelFromShellByIdShortResponse
func (c *ClientWithResponses) ShellRepoGetSubmodelFromShellByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelFromShellByIdShortResponse, error) {
	rsp, err := c.ShellRepoGetSubmodelFromShellByIdShort(ctx, aasId, submodelIdShort, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoGetSubmodelFromShellByIdShortResponse(rsp)
}

// ShellRepoGetSubmodelElementsWithResponse request returning *ShellRepoGetSubmodelElementsResponse
func (c *ClientWithResponses) ShellRepoGetSubmodelElementsWithResponse(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelElementsResponse, error) {
	rsp, err := c.ShellRepoGetSubmodelElements(ctx, aasId, submodelIdShort, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoGetSubmodelElementsResponse(rsp)
}

// ShellRepoGetInvocationResultByIdShortWithResponse request returning *ShellRepoGetInvocationResultByIdShortResponse
func (c *ClientWithResponses) ShellRepoGetInvocationResultByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, requestId string, reqEditors ...RequestEditorFn) (*ShellRepoGetInvocationResultByIdShortResponse, error) {
	rsp, err := c.ShellRepoGetInvocationResultByIdShort(ctx, aasId, submodelIdShort, idShortPathToOperation, requestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoGetInvocationResultByIdShortResponse(rsp)
}

// ShellRepoInvokeOperationByIdShortWithBodyWithResponse request with arbitrary body returning *ShellRepoInvokeOperationByIdShortResponse
func (c *ClientWithResponses) ShellRepoInvokeOperationByIdShortWithBodyWithResponse(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, params *ShellRepoInvokeOperationByIdShortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShellRepoInvokeOperationByIdShortResponse, error) {
	rsp, err := c.ShellRepoInvokeOperationByIdShortWithBody(ctx, aasId, submodelIdShort, idShortPathToOperation, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoInvokeOperationByIdShortResponse(rsp)
}

func (c *ClientWithResponses) ShellRepoInvokeOperationByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, idShortPathToOperation string, params *ShellRepoInvokeOperationByIdShortParams, body ShellRepoInvokeOperationByIdShortJSONRequestBody, reqEditors ...RequestEditorFn) (*ShellRepoInvokeOperationByIdShortResponse, error) {
	rsp, err := c.ShellRepoInvokeOperationByIdShort(ctx, aasId, submodelIdShort, idShortPathToOperation, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoInvokeOperationByIdShortResponse(rsp)
}

// ShellRepoDeleteSubmodelElementByIdShortWithResponse request returning *ShellRepoDeleteSubmodelElementByIdShortResponse
func (c *ClientWithResponses) ShellRepoDeleteSubmodelElementByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*ShellRepoDeleteSubmodelElementByIdShortResponse, error) {
	rsp, err := c.ShellRepoDeleteSubmodelElementByIdShort(ctx, aasId, submodelIdShort, seIdShortPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoDeleteSubmodelElementByIdShortResponse(rsp)
}

// ShellRepoGetSubmodelElementByIdShortWithResponse request returning *ShellRepoGetSubmodelElementByIdShortResponse
func (c *ClientWithResponses) ShellRepoGetSubmodelElementByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelElementByIdShortResponse, error) {
	rsp, err := c.ShellRepoGetSubmodelElementByIdShort(ctx, aasId, submodelIdShort, seIdShortPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoGetSubmodelElementByIdShortResponse(rsp)
}

// ShellRepoPutSubmodelElementWithBodyWithResponse request with arbitrary body returning *ShellRepoPutSubmodelElementResponse
func (c *ClientWithResponses) ShellRepoPutSubmodelElementWithBodyWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelElementResponse, error) {
	rsp, err := c.ShellRepoPutSubmodelElementWithBody(ctx, aasId, submodelIdShort, seIdShortPath, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoPutSubmodelElementResponse(rsp)
}

func (c *ClientWithResponses) ShellRepoPutSubmodelElementWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, body ShellRepoPutSubmodelElementJSONRequestBody, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelElementResponse, error) {
	rsp, err := c.ShellRepoPutSubmodelElement(ctx, aasId, submodelIdShort, seIdShortPath, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoPutSubmodelElementResponse(rsp)
}

// ShellRepoGetSubmodelElementValueByIdShortWithResponse request returning *ShellRepoGetSubmodelElementValueByIdShortResponse
func (c *ClientWithResponses) ShellRepoGetSubmodelElementValueByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelElementValueByIdShortResponse, error) {
	rsp, err := c.ShellRepoGetSubmodelElementValueByIdShort(ctx, aasId, submodelIdShort, seIdShortPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoGetSubmodelElementValueByIdShortResponse(rsp)
}

// ShellRepoPutSubmodelElementValueByIdShortWithBodyWithResponse request with arbitrary body returning *ShellRepoPutSubmodelElementValueByIdShortResponse
func (c *ClientWithResponses) ShellRepoPutSubmodelElementValueByIdShortWithBodyWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelElementValueByIdShortResponse, error) {
	rsp, err := c.ShellRepoPutSubmodelElementValueByIdShortWithBody(ctx, aasId, submodelIdShort, seIdShortPath, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoPutSubmodelElementValueByIdShortResponse(rsp)
}

func (c *ClientWithResponses) ShellRepoPutSubmodelElementValueByIdShortWithResponse(ctx context.Context, aasId string, submodelIdShort string, seIdShortPath string, body ShellRepoPutSubmodelElementValueByIdShortJSONRequestBody, reqEditors ...RequestEditorFn) (*ShellRepoPutSubmodelElementValueByIdShortResponse, error) {
	rsp, err := c.ShellRepoPutSubmodelElementValueByIdShort(ctx, aasId, submodelIdShort, seIdShortPath, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoPutSubmodelElementValueByIdShortResponse(rsp)
}

// ShellRepoGetSubmodelValuesWithResponse request returning *ShellRepoGetSubmodelValuesResponse
func (c *ClientWithResponses) ShellRepoGetSubmodelValuesWithResponse(ctx context.Context, aasId string, submodelIdShort string, reqEditors ...RequestEditorFn) (*ShellRepoGetSubmodelValuesResponse, error) {
	rsp, err := c.ShellRepoGetSubmodelValues(ctx, aasId, submodelIdShort, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShellRepoGetSubmodelValuesResponse(rsp)
}

// ParseGetAllAssetAdministrationShellsResponse parses an HTTP response from a GetAllAssetAdministrationShellsWithResponse call
func ParseGetAllAssetAdministrationShellsResponse(rsp *http.Response) (*GetAllAssetAdministrationShellsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAssetAdministrationShellsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetAdministrationShell
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAssetAdministrationShellByIdResponse parses an HTTP response from a DeleteAssetAdministrationShellByIdWithResponse call
func ParseDeleteAssetAdministrationShellByIdResponse(rsp *http.Response) (*DeleteAssetAdministrationShellByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAssetAdministrationShellByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShellsAasIdResponse parses an HTTP response from a GetShellsAasIdWithResponse call
func ParseGetShellsAasIdResponse(rsp *http.Response) (*GetShellsAasIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShellsAasIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetAdministrationShell
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAssetAdministrationShellResponse parses an HTTP response from a PutAssetAdministrationShellWithResponse call
func ParsePutAssetAdministrationShellResponse(rsp *http.Response) (*PutAssetAdministrationShellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAssetAdministrationShellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AssetAdministrationShell
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAssetAdministrationShellByIdResponse parses an HTTP response from a GetAssetAdministrationShellByIdWithResponse call
func ParseGetAssetAdministrationShellByIdResponse(rsp *http.Response) (*GetAssetAdministrationShellByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetAdministrationShellByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetAdministrationShell
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseShellRepoGetSubmodelsFromShellResponse parses an HTTP response from a ShellRepoGetSubmodelsFromShellWithResponse call
func ParseShellRepoGetSubmodelsFromShellResponse(rsp *http.Response) (*ShellRepoGetSubmodelsFromShellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoGetSubmodelsFromShellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseShellRepoDeleteSubmodelFromShellByIdShortResponse parses an HTTP response from a ShellRepoDeleteSubmodelFromShellByIdShortWithResponse call
func ParseShellRepoDeleteSubmodelFromShellByIdShortResponse(rsp *http.Response) (*ShellRepoDeleteSubmodelFromShellByIdShortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoDeleteSubmodelFromShellByIdShortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetShellsAasIdAasSubmodelsSubmodelIdShortResponse parses an HTTP response from a GetShellsAasIdAasSubmodelsSubmodelIdShortWithResponse call
func ParseGetShellsAasIdAasSubmodelsSubmodelIdShortResponse(rsp *http.Response) (*GetShellsAasIdAasSubmodelsSubmodelIdShortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShellsAasIdAasSubmodelsSubmodelIdShortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Submodel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShellRepoPutSubmodelToShellResponse parses an HTTP response from a ShellRepoPutSubmodelToShellWithResponse call
func ParseShellRepoPutSubmodelToShellResponse(rsp *http.Response) (*ShellRepoPutSubmodelToShellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoPutSubmodelToShellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Submodel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseShellRepoGetSubmodelFromShellByIdShortResponse parses an HTTP response from a ShellRepoGetSubmodelFromShellByIdShortWithResponse call
func ParseShellRepoGetSubmodelFromShellByIdShortResponse(rsp *http.Response) (*ShellRepoGetSubmodelFromShellByIdShortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoGetSubmodelFromShellByIdShortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Submodel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShellRepoGetSubmodelElementsResponse parses an HTTP response from a ShellRepoGetSubmodelElementsWithResponse call
func ParseShellRepoGetSubmodelElementsResponse(rsp *http.Response) (*ShellRepoGetSubmodelElementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoGetSubmodelElementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SubmodelElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShellRepoGetInvocationResultByIdShortResponse parses an HTTP response from a ShellRepoGetInvocationResultByIdShortWithResponse call
func ParseShellRepoGetInvocationResultByIdShortResponse(rsp *http.Response) (*ShellRepoGetInvocationResultByIdShortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoGetInvocationResultByIdShortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvocationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShellRepoInvokeOperationByIdShortResponse parses an HTTP response from a ShellRepoInvokeOperationByIdShortWithResponse call
func ParseShellRepoInvokeOperationByIdShortResponse(rsp *http.Response) (*ShellRepoInvokeOperationByIdShortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoInvokeOperationByIdShortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShellRepoDeleteSubmodelElementByIdShortResponse parses an HTTP response from a ShellRepoDeleteSubmodelElementByIdShortWithResponse call
func ParseShellRepoDeleteSubmodelElementByIdShortResponse(rsp *http.Response) (*ShellRepoDeleteSubmodelElementByIdShortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoDeleteSubmodelElementByIdShortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseShellRepoGetSubmodelElementByIdShortResponse parses an HTTP response from a ShellRepoGetSubmodelElementByIdShortWithResponse call
func ParseShellRepoGetSubmodelElementByIdShortResponse(rsp *http.Response) (*ShellRepoGetSubmodelElementByIdShortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoGetSubmodelElementByIdShortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmodelElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShellRepoPutSubmodelElementResponse parses an HTTP response from a ShellRepoPutSubmodelElementWithResponse call
func ParseShellRepoPutSubmodelElementResponse(rsp *http.Response) (*ShellRepoPutSubmodelElementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoPutSubmodelElementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SubmodelElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShellRepoGetSubmodelElementValueByIdShortResponse parses an HTTP response from a ShellRepoGetSubmodelElementValueByIdShortWithResponse call
func ParseShellRepoGetSubmodelElementValueByIdShortResponse(rsp *http.Response) (*ShellRepoGetSubmodelElementValueByIdShortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoGetSubmodelElementValueByIdShortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseShellRepoPutSubmodelElementValueByIdShortResponse parses an HTTP response from a ShellRepoPutSubmodelElementValueByIdShortWithResponse call
func ParseShellRepoPutSubmodelElementValueByIdShortResponse(rsp *http.Response) (*ShellRepoPutSubmodelElementValueByIdShortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoPutSubmodelElementValueByIdShortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShellRepoGetSubmodelValuesResponse parses an HTTP response from a ShellRepoGetSubmodelValuesWithResponse call
func ParseShellRepoGetSubmodelValuesResponse(rsp *http.Response) (*ShellRepoGetSubmodelValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShellRepoGetSubmodelValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieves all Asset Administration Shells from the Asset Administration Shell repository
	// (GET /shells)
	GetAllAssetAdministrationShells(ctx echo.Context) error
	// Deletes a specific Asset Administration Shell at the Asset Administration Shell repository
	// (DELETE /shells/{aasId})
	DeleteAssetAdministrationShellById(ctx echo.Context, aasId string) error
	// Retrieves a specific Asset Administration Shell from the Asset Administration Shell repository
	// (GET /shells/{aasId})
	GetShellsAasId(ctx echo.Context, aasId string) error
	// Creates or updates a Asset Administration Shell at the Asset Administration Shell repository
	// (PUT /shells/{aasId})
	PutAssetAdministrationShell(ctx echo.Context, aasId string) error
	// Retrieves a specific Asset Administration Shell from the Asset Administration Shell repository
	// (GET /shells/{aasId}/aas)
	GetAssetAdministrationShellById(ctx echo.Context, aasId string) error
	// Retrieves all Submodels from the  Asset Administration Shell
	// (GET /shells/{aasId}/aas/submodels)
	ShellRepoGetSubmodelsFromShell(ctx echo.Context, aasId string) error
	// Deletes a specific Submodel from the Asset Administration Shell
	// (DELETE /shells/{aasId}/aas/submodels/{submodelIdShort})
	ShellRepoDeleteSubmodelFromShellByIdShort(ctx echo.Context, aasId string, submodelIdShort string) error
	// Retrieves the Submodel from the Asset Administration Shell
	// (GET /shells/{aasId}/aas/submodels/{submodelIdShort})
	GetShellsAasIdAasSubmodelsSubmodelIdShort(ctx echo.Context, aasId string, submodelIdShort string) error
	// Creates or updates a Submodel to an existing Asset Administration Shell
	// (PUT /shells/{aasId}/aas/submodels/{submodelIdShort})
	ShellRepoPutSubmodelToShell(ctx echo.Context, aasId string, submodelIdShort string) error
	// Retrieves the Submodel from the Asset Administration Shell
	// (GET /shells/{aasId}/aas/submodels/{submodelIdShort}/submodel)
	ShellRepoGetSubmodelFromShellByIdShort(ctx echo.Context, aasId string, submodelIdShort string) error
	// Retrieves all Submodel-Elements from the Submodel
	// (GET /shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements)
	ShellRepoGetSubmodelElements(ctx echo.Context, aasId string, submodelIdShort string) error
	// Retrieves the result of an asynchronously started operation
	// (GET /shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{idShortPathToOperation}/invocationList/{requestId})
	ShellRepoGetInvocationResultByIdShort(ctx echo.Context, aasId string, submodelIdShort string, idShortPathToOperation string, requestId string) error
	// Invokes a specific operation from the Submodel synchronously or asynchronously
	// (POST /shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{idShortPathToOperation}/invoke)
	ShellRepoInvokeOperationByIdShort(ctx echo.Context, aasId string, submodelIdShort string, idShortPathToOperation string, params ShellRepoInvokeOperationByIdShortParams) error
	// Deletes a specific Submodel-Element from the Submodel
	// (DELETE /shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{seIdShortPath})
	ShellRepoDeleteSubmodelElementByIdShort(ctx echo.Context, aasId string, submodelIdShort string, seIdShortPath string) error
	// Retrieves a specific Submodel-Element from the Submodel
	// (GET /shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{seIdShortPath})
	ShellRepoGetSubmodelElementByIdShort(ctx echo.Context, aasId string, submodelIdShort string, seIdShortPath string) error
	// Creates or updates a Submodel-Element at the Submodel
	// (PUT /shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{seIdShortPath})
	ShellRepoPutSubmodelElement(ctx echo.Context, aasId string, submodelIdShort string, seIdShortPath string) error
	// Retrieves the value of a specific Submodel-Element from the Submodel
	// (GET /shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{seIdShortPath}/value)
	ShellRepoGetSubmodelElementValueByIdShort(ctx echo.Context, aasId string, submodelIdShort string, seIdShortPath string) error
	// Updates the Submodel-Element's value
	// (PUT /shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{seIdShortPath}/value)
	ShellRepoPutSubmodelElementValueByIdShort(ctx echo.Context, aasId string, submodelIdShort string, seIdShortPath string) error
	// Retrieves the minimized version of a Submodel, i.e. only the values of SubmodelElements are serialized and returned
	// (GET /shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/values)
	ShellRepoGetSubmodelValues(ctx echo.Context, aasId string, submodelIdShort string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllAssetAdministrationShells converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllAssetAdministrationShells(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllAssetAdministrationShells(ctx)
	return err
}

// DeleteAssetAdministrationShellById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAssetAdministrationShellById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAssetAdministrationShellById(ctx, aasId)
	return err
}

// GetShellsAasId converts echo context to params.
func (w *ServerInterfaceWrapper) GetShellsAasId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetShellsAasId(ctx, aasId)
	return err
}

// PutAssetAdministrationShell converts echo context to params.
func (w *ServerInterfaceWrapper) PutAssetAdministrationShell(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutAssetAdministrationShell(ctx, aasId)
	return err
}

// GetAssetAdministrationShellById converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetAdministrationShellById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAssetAdministrationShellById(ctx, aasId)
	return err
}

// ShellRepoGetSubmodelsFromShell converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoGetSubmodelsFromShell(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoGetSubmodelsFromShell(ctx, aasId)
	return err
}

// ShellRepoDeleteSubmodelFromShellByIdShort converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoDeleteSubmodelFromShellByIdShort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoDeleteSubmodelFromShellByIdShort(ctx, aasId, submodelIdShort)
	return err
}

// GetShellsAasIdAasSubmodelsSubmodelIdShort converts echo context to params.
func (w *ServerInterfaceWrapper) GetShellsAasIdAasSubmodelsSubmodelIdShort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetShellsAasIdAasSubmodelsSubmodelIdShort(ctx, aasId, submodelIdShort)
	return err
}

// ShellRepoPutSubmodelToShell converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoPutSubmodelToShell(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoPutSubmodelToShell(ctx, aasId, submodelIdShort)
	return err
}

// ShellRepoGetSubmodelFromShellByIdShort converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoGetSubmodelFromShellByIdShort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoGetSubmodelFromShellByIdShort(ctx, aasId, submodelIdShort)
	return err
}

// ShellRepoGetSubmodelElements converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoGetSubmodelElements(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoGetSubmodelElements(ctx, aasId, submodelIdShort)
	return err
}

// ShellRepoGetInvocationResultByIdShort converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoGetInvocationResultByIdShort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// ------------- Path parameter "idShortPathToOperation" -------------
	var idShortPathToOperation string

	err = runtime.BindStyledParameterWithLocation("simple", false, "idShortPathToOperation", runtime.ParamLocationPath, ctx.Param("idShortPathToOperation"), &idShortPathToOperation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idShortPathToOperation: %s", err))
	}

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, ctx.Param("requestId"), &requestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requestId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoGetInvocationResultByIdShort(ctx, aasId, submodelIdShort, idShortPathToOperation, requestId)
	return err
}

// ShellRepoInvokeOperationByIdShort converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoInvokeOperationByIdShort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// ------------- Path parameter "idShortPathToOperation" -------------
	var idShortPathToOperation string

	err = runtime.BindStyledParameterWithLocation("simple", false, "idShortPathToOperation", runtime.ParamLocationPath, ctx.Param("idShortPathToOperation"), &idShortPathToOperation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idShortPathToOperation: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ShellRepoInvokeOperationByIdShortParams
	// ------------- Optional query parameter "async" -------------

	err = runtime.BindQueryParameter("form", true, false, "async", ctx.QueryParams(), &params.Async)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter async: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoInvokeOperationByIdShort(ctx, aasId, submodelIdShort, idShortPathToOperation, params)
	return err
}

// ShellRepoDeleteSubmodelElementByIdShort converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoDeleteSubmodelElementByIdShort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// ------------- Path parameter "seIdShortPath" -------------
	var seIdShortPath string

	err = runtime.BindStyledParameterWithLocation("simple", false, "seIdShortPath", runtime.ParamLocationPath, ctx.Param("seIdShortPath"), &seIdShortPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seIdShortPath: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoDeleteSubmodelElementByIdShort(ctx, aasId, submodelIdShort, seIdShortPath)
	return err
}

// ShellRepoGetSubmodelElementByIdShort converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoGetSubmodelElementByIdShort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// ------------- Path parameter "seIdShortPath" -------------
	var seIdShortPath string

	err = runtime.BindStyledParameterWithLocation("simple", false, "seIdShortPath", runtime.ParamLocationPath, ctx.Param("seIdShortPath"), &seIdShortPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seIdShortPath: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoGetSubmodelElementByIdShort(ctx, aasId, submodelIdShort, seIdShortPath)
	return err
}

// ShellRepoPutSubmodelElement converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoPutSubmodelElement(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// ------------- Path parameter "seIdShortPath" -------------
	var seIdShortPath string

	err = runtime.BindStyledParameterWithLocation("simple", false, "seIdShortPath", runtime.ParamLocationPath, ctx.Param("seIdShortPath"), &seIdShortPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seIdShortPath: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoPutSubmodelElement(ctx, aasId, submodelIdShort, seIdShortPath)
	return err
}

// ShellRepoGetSubmodelElementValueByIdShort converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoGetSubmodelElementValueByIdShort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// ------------- Path parameter "seIdShortPath" -------------
	var seIdShortPath string

	err = runtime.BindStyledParameterWithLocation("simple", false, "seIdShortPath", runtime.ParamLocationPath, ctx.Param("seIdShortPath"), &seIdShortPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seIdShortPath: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoGetSubmodelElementValueByIdShort(ctx, aasId, submodelIdShort, seIdShortPath)
	return err
}

// ShellRepoPutSubmodelElementValueByIdShort converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoPutSubmodelElementValueByIdShort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// ------------- Path parameter "seIdShortPath" -------------
	var seIdShortPath string

	err = runtime.BindStyledParameterWithLocation("simple", false, "seIdShortPath", runtime.ParamLocationPath, ctx.Param("seIdShortPath"), &seIdShortPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seIdShortPath: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoPutSubmodelElementValueByIdShort(ctx, aasId, submodelIdShort, seIdShortPath)
	return err
}

// ShellRepoGetSubmodelValues converts echo context to params.
func (w *ServerInterfaceWrapper) ShellRepoGetSubmodelValues(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aasId" -------------
	var aasId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aasId", runtime.ParamLocationPath, ctx.Param("aasId"), &aasId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aasId: %s", err))
	}

	// ------------- Path parameter "submodelIdShort" -------------
	var submodelIdShort string

	err = runtime.BindStyledParameterWithLocation("simple", false, "submodelIdShort", runtime.ParamLocationPath, ctx.Param("submodelIdShort"), &submodelIdShort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter submodelIdShort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShellRepoGetSubmodelValues(ctx, aasId, submodelIdShort)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/shells", wrapper.GetAllAssetAdministrationShells)
	router.DELETE(baseURL+"/shells/:aasId", wrapper.DeleteAssetAdministrationShellById)
	router.GET(baseURL+"/shells/:aasId", wrapper.GetShellsAasId)
	router.PUT(baseURL+"/shells/:aasId", wrapper.PutAssetAdministrationShell)
	router.GET(baseURL+"/shells/:aasId/aas", wrapper.GetAssetAdministrationShellById)
	router.GET(baseURL+"/shells/:aasId/aas/submodels", wrapper.ShellRepoGetSubmodelsFromShell)
	router.DELETE(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort", wrapper.ShellRepoDeleteSubmodelFromShellByIdShort)
	router.GET(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort", wrapper.GetShellsAasIdAasSubmodelsSubmodelIdShort)
	router.PUT(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort", wrapper.ShellRepoPutSubmodelToShell)
	router.GET(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort/submodel", wrapper.ShellRepoGetSubmodelFromShellByIdShort)
	router.GET(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort/submodel/submodelElements", wrapper.ShellRepoGetSubmodelElements)
	router.GET(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort/submodel/submodelElements/:idShortPathToOperation/invocationList/:requestId", wrapper.ShellRepoGetInvocationResultByIdShort)
	router.POST(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort/submodel/submodelElements/:idShortPathToOperation/invoke", wrapper.ShellRepoInvokeOperationByIdShort)
	router.DELETE(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort/submodel/submodelElements/:seIdShortPath", wrapper.ShellRepoDeleteSubmodelElementByIdShort)
	router.GET(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort/submodel/submodelElements/:seIdShortPath", wrapper.ShellRepoGetSubmodelElementByIdShort)
	router.PUT(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort/submodel/submodelElements/:seIdShortPath", wrapper.ShellRepoPutSubmodelElement)
	router.GET(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort/submodel/submodelElements/:seIdShortPath/value", wrapper.ShellRepoGetSubmodelElementValueByIdShort)
	router.PUT(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort/submodel/submodelElements/:seIdShortPath/value", wrapper.ShellRepoPutSubmodelElementValueByIdShort)
	router.GET(baseURL+"/shells/:aasId/aas/submodels/:submodelIdShort/submodel/values", wrapper.ShellRepoGetSubmodelValues)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdX3PjNpL/KizeVWW3ShnN7Oby4KeTbTlRjf/oJHmucinXFky2JGxAgAOAtpUpffcr",
	"gCT4ByBF2tLYmdFLRiaBRgPd/etGo8F88QMWxYwClcI/+eKLYA0R0j9HQQBCnDEqOSPqQcxZDFxi0K+R",
	"fj0FHmEhMKOzhIB6jiVEusF/clj6J/5/DIsRhhn54cjVeTvw5SYG/8RHnKON+juEJUqIHNMHzBmNgMqR",
	"lBzfJxJ2jjGDJXCgAZQIFSM+q/s8uf83BM/lQQCBQKJ7Ai+fT0HruVMqKLxkVoXMmCaiKFcUZ8oIDjZT",
	"hjMFqypRrN+OwghTLCRHEjOq2+5iYdrYcTvIqJ5DgEU/etUuhtKYLhkPQImrBzGrl6E3UW+igmfRjaDd",
	"TS0/h88J5hD6J7+3LKd7URoneNcoVtvgESE3S//k9w46o7TN3w7aW/5PggheYtO2pjGFuk+B36TcdYWd",
	"qauzA3Yk4itwW3unceye24EfYTpJO3+oj1gTY9Pwd9s7JYeSeB+gpBS2eXF40NJWv7MRheSYrhQ/D8Ab",
	"3jmNWgiQVc2ar4GQ7howCYHKsmDbGv+KxDmSaB5DgJc4SOdnawNSXPWCvYDRAGJ5jgNFEnHcQ6xntb4b",
	"t8vi+AHCC86inngcJBzLzU7dytupPsl9xEIg3adQGbLO+gOGx+6kPmF4tKnUVDkVUKq4p0jgYPwAKYB2",
	"U5q0uS14di+AP6gx+riqMmeGQsYcYffd2ZpnCz8mGjQdDEY4goVeGZfpIZKA2/DKLBoaeY+C1TM1kjaM",
	"Hhhc7mRzfG+TbSOmFyw1KIkwhXD8JIHmiPJyZSRIyBo7WZN7xggg6m+3ejnOUIzuMclM55ny04ScoxUQ",
	"aJv/AbxfR+DLYQxEwHEs8+jvpcuerSijCuOzSKem12rZcsVuG+XKNLTU2rxxhRnW7FUgmWEGo9BhsS0K",
	"k/HZzx/++fP7nNIuGVgEpuuNwAEitxRLQ+TOxWx9qM4a8kkZuIlI6qseIonyRQeaRGoZz0eLsT/w54vZ",
	"5PoX8+Nfi9noen45WoxOL9Xr2Xh0+a+r8Wh+OzN/nt3cXi/MH7ez2fj67Dd/4J/e3FyOR9f+wL+dXar3",
	"o8Xk5npU/lkitZhc5f/MF6OraUmaBdKFsMQUyz6ocInoam4IWLAAD4X+daNnejjIxVwZA4fwGkWwJxbF",
	"mnG5T3os4QHcLM8ra2kttdhE9+lG3XqVUCwbX0zCXoChPdGFjjmbfdslFjvDsk+mobWNqQjFBgmn5bls",
	"9MQBm1nYe4ECybhzBnvX2RDTayZRo+QggDMWQtO7XJWsdyoUb3zJYWUi9VEi10wFjamsbdXBjWQEbmW9",
	"q24mcUww8EYlbBxfvZw3aXZNb0qCK1Gt0HB5nHF0D2EIoe13T1w4bDXpnkVqcW29/JHxQfUFsNhrGdS5",
	"FFS+LI7aww4NNA9dQoxx0VLpmERSc9Frn15jv303U2ItDcXHFV5zz3zGrhBFKwiz5Rz4cyDL6jOXs+y5",
	"N3IGsRe4T1bmVfcxzlDXMjloss7uYm42cJfALaP4FYk5RIhKHDhSmCJ7NQlfmDat5EeeubOo2V4lXbMz",
	"J9+YV9oOfJwx1w318qkAt3ShRijVhFJ7a32x22XhsAtCfISNcwuCQ9+QcOHghD6wlMMZfE5AOEIJTFki",
	"40SO+Crphzo3MaQS+YR4ng2zYgZMD0ebp3NqCAYkjoAl5eAOUwmrTJatSyViRgU4bPgJgkSnDGW2uc6h",
	"cqL8NZKg5DFLKFU8qA1oFBNIn54hGgDRPy8QTn8sMhZdIHpgubC80QxEQjp4Nt1KdTwkV20SdQntI2xc",
	"ltbLpAY+YQEirsRMPuJOSpnfET2cScZlPno2lPEs7smacUqqpzPafktmu8j4FFkW5cszn+k3HIkM/BGl",
	"KmaGcAYkdVVrHOcutpIHzfKOlSSWK9GU7ncKEtrLm3AtjxwG/lVCJFabkQStYJpKV703SuQP/NLjGaIr",
	"Rcd4pmIEN+v1eMF6csYIgSAbSWeIB/4vhN0jUni/gX/B0Uq1Lp65LDnXtHJklQjJIn/gT2bnE/2P/m84",
	"V1vuEuFJ6KRY2qZZ2k+yVXNjIjzJ3appSGQdXMp4Wc5f5NO6wmq5rtCTP/Cv9fwWm9g5gysQImOyvrNt",
	"2EBGaY/6kLdUpJGQBtRzuE8U8Ja9/sD/X8QzQB5zzrhGYKltbvykFFQ78EGf1bKW46qcTqzOiGZbwk5J",
	"RvsslLpzB6Uhj2jwVtGgkoIe+BeMRwlB/sDPzoaBu41DDY3p6iOmYVm2C4hiogIPpeBCoibAca/XHjdT",
	"xsXtIamkafXbdOhY+8ZxqF0/W6u06H66nq/YzsNuyyYLjdzjaueRoAmc9h+gH4b04djOVMBqeNKoqd2O",
	"XLLDwPZGGqZ2NSpB366mGd7tbPbQ5cynBMO7mrphYlevQsV3texMMgXsna3qcL67gw32u/o0A//2ru6Z",
	"myP1wnfaGvkHpuHNstrCOG9C2KMOY+hGh1ByFMcEB1q3B/4t1ZlhcAeFcYXk84oJLOYqZNunWq1jckFx",
	"r/RpdTo9y6Kai6FuetYIWu2duD9tq/+r5xAkcIqIVZZqbz71ztBqt7seNW9spX2dQ981zseqPHTPxNFY",
	"OMsc3Nw4uzcz5SpibOPL1b4XZ52KCqfNBZFu5upN3RqAaXPrF9dIuCdtDeWc7l6Cys51BMrZl8sprVX9",
	"nMfTvYrg8si8U/Y8dVL7PJFAT+6NLqbNhxT17S+im1uO/YF/jwT8/NMpzjZWuQ7pczPI/lngqPxzLlEU",
	"q78hwJHeDucJUgU9er+c7ltElpW432hSlNFrWGXZ9bxDzASuPkmowCsK4WVKKv9zoknmf+UJj/zvUzPE",
	"1CJIrUFDlqSeMUx4cU64UZM7L55sAPErRuW69GxJGFLjrs6RWq6Vfm9+ZA9/A8Tzf/MGa3gyi3x9s9Dl",
	"JGpDlx3RZuJSM+ARIvhPCOf5I8n+ADV2Kb2S9bo+y36MrxeTxW9qf3eu/zMbX6jXV4ubj2M1jMSRa8tX",
	"P6fSCZhIJ2MKrUmPKIpzFjv1giSsWFoO5igmKLIF+9n44Uz4Tht4RnXWwI8R73AK3Rz9YKOO7aVdBQU7",
	"uoNNdwj6CJudsKwJtjKRI8wh9ve9duSueHuPTC0xF7JvKTKjLyitTUc0dHIDys9Lao7dlBxwQOENJRv/",
	"RPIEHKKrVgY0NC+dBIkiTdncvhQ1ZKnS7oqYZ2P1/J3UiyKuRAePXRhxedF5qTrcdQ+r4bZN55i30nE7",
	"8INqLaxZje7pgEqx8V3DmZXSmFLDvZYQ1yvRG6frQgnn3Y/awf+zr4dUmO6ZKTP55q9876LPjZ0dAxTF",
	"FDZY/YF3A08lzVu6BVE+5NtT+Y9W3Hqzr1n13Wspn3+rqv+yO5emlPbZZwkZIezxPNEJnczMbOxmPAQO",
	"ofulnXc/pjWPac2XpjXdaPGpXP/sCA8N31OEuTmG7Hbjytm/393CJh5cTrCcS2g+IXBvuJ9TVX7cpB83",
	"6c5NulszbUt43m0bbbUYHt+uY7cuMWQ37voGPDtufm115nTJzCCp3UOEMPFP1CMhFVf03Z8YFM3/vmci",
	"WL8LdMlKWq+RntzrVt7/pa2UBXBFYC1lLE6Gw8fHx3em5zCEoZUo8Rdr8JYJIV7psceWnlyDtwIKHAfe",
	"KZpvnjxdsOFVjxA8XbLhzUAbLuMb79fFYurNxvPFj6PpRKkpDiArVcz4Hk8vf/zHu/dOZiEgOBbwjvHV",
	"kMAKkSHERLUepgWTkigKL+HHXMb2Hz5kZYYUxdg/8f/57v27DwqDkFxrAQ+FIqZ/rtLSelOTqEDX/wXk",
	"iJCmOhbhK3+QFmpqGv94/z6Xdx7cpmdnqsvw3yKN5VIN6v59j6YqGofe1UU/A5lwKjzkESykEvqSJTRs",
	"Wdj0cEkkUaQvZSoKHMMDCA8R0tbPW3IWaZ1qkRo3UlMYhVbClAs5JliI2Nfnnpmwhl8QEpNwq++QAIF0",
	"V12V27l+3kT4dDMJtRZwFIHUCfvfvziMpnkiPwgvofhzAp6ufoanmOiasSUiApTh+ydayQpT1jz75fgh",
	"TVgUyvCC8WlCSJpPbUjfCLnRZiVwFCukvXuh4nYp07W1sUUxUkGGXpbaUXC1qWliKlOly1m1XdCmaUge",
	"ThcHjWCRmsIok/VRwQ6iYM2A2AyASheywm5ogz81l5/e/2Qv1zVr0yWNqs3I2UljD4ufAz9OHDo7TWRL",
	"leb3rsBaX05ZuHkV3W2fYJr2rZjYh1dhs0VdAw7IRnVlYe9teZ6i0MtvCFUt6UyTER7jXhKHKHUCr4T9",
	"dhwyRKg9gDxGIUcn8ddwEm7lHlY+jeRUc0PqF/2trbT1BWfR0ZO8UqzdtPMz0mlT4ryRNwf+gAPwppw9",
	"4BC42KXEhBQjFMraZkt7VtHhl/xndpOpdZ9o6Kebi5x1o7kKo/PM43eswgPXcPli/SA8nfftPLeagHrO",
	"0j3sHqzSYQrGDtzbUxPIHNiWmyMjx57Y8NzBVRxk4ztCwkDA3BL10Yq+bSvanz2Y6gyHRRgl55nreROm",
	"aRzqgQdt89A7HLQsyf4wCOFMM5iG08TEhwt2DA6/WUzYf+akDQ4U9wI4Ts9RCwUvDjkPlinphFI78iCv",
	"Fj44EyuGa8k8RD14wkJiunrVGN6867UDPYbxxwDkGIB8XwHIC7Bl6Cp+7Qw2ptMRYo4Q07vIo0P5dN8M",
	"34/lD0J9HVwwhk2Z7JEpNJwWgFD6FMyrmf/wS3YZa4rkesFMde52iM132i6xkMMv5pNh206QUfnMW0Lk",
	"MTxxY8cr4MaeMMMJgxk3nuJVBddKz8ufD+owMbdC9pTgLj72M9vMJjrLrPjsXr/ZVMZ5U/Gj42uOThhX",
	"EJCj5TcdNhr3MCz0zRvmfHRwGukBrV4vtlSbUyQ2NFhzRlkiyMYTEnG1z2YlbX6j7uOP9OIuE22+YqIb",
	"mp5HP3H0E9+UnzhXChxhCsJ7XINcA9eDmE/c5lXqxjw8LCo27/1NDf13j3GNHn/TK/L38hqlrOkl+pyA",
	"LonIlVrR8ZuX4HDM2Zfq8pVaMh4dLINqf4i5IZVqsEVnU3MHmyZTvSVL16GIgR35VUd5V4H4Kfx9VwmT",
	"kue7ArlmobdGNCTAG51eCv2Vk91C0axtklf1g4zXPOPr+kEBkwKPnlOPkZE6+r9vNcfSOqU8PfCDyF3S",
	"j9N0Cl2mV9a9Z06umYG/SDHYPPtgxnbQXueST7Sl3qWtSmZorVgjvLUUrpi+L04GDXpnb48Ic0SYI8J0",
	"z1J3raWuz/NVIq/O4OQsyj4EPHWulSm+Cn5EpSMq/VVR6XBFQS2A5JrQ1ywMamHNYusN1Qm9mSPD1hol",
	"s3LZla+3cWxY3e8Ozddd+kaj+ssax5D0CP7feUha+2RNe9CprU0fDzXHbm8u/FTs/NdXYCdLPqqR9Zfg",
	"oP2srctavkYcfATGIzB+51GxzR+Fx9RgmzlpRtAqgW2fy3Gl9UjxIlgjumpOHr4xxO0JkLdZDCrdGpEL",
	"4KtFn3rAfpWqn9IuR9T8LupUG08C3lxJqDIpJelIHztnX3FLo4+cysDD7+CdxyjZFAGKUG3qZdge4pU7",
	"QYiGHtdhov6fNPazT/0dd/6QG0r6Ubuhv73b/n8AAAD//2P1FOD0kQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
